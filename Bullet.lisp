;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.40
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant BT_BULLET_VERSION 279)

(cffi:defcfun ("_wrap_btGetVersion" btGetVersion) :int)

(cl:defconstant BT_LARGE_FLOAT 1d18)

(cffi:defcfun ("_wrap_btSqrt" btSqrt) :float
  (y :float))

(cffi:defcfun ("_wrap_btFabs" btFabs) :float
  (x :float))

(cffi:defcfun ("_wrap_btCos" btCos) :float
  (x :float))

(cffi:defcfun ("_wrap_btSin" btSin) :float
  (x :float))

(cffi:defcfun ("_wrap_btTan" btTan) :float
  (x :float))

(cffi:defcfun ("_wrap_btAcos" btAcos) :float
  (x :float))

(cffi:defcfun ("_wrap_btAsin" btAsin) :float
  (x :float))

(cffi:defcfun ("_wrap_btAtan" btAtan) :float
  (x :float))

(cffi:defcfun ("_wrap_btAtan2" btAtan2) :float
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_btExp" btExp) :float
  (x :float))

(cffi:defcfun ("_wrap_btLog" btLog) :float
  (x :float))

(cffi:defcfun ("_wrap_btPow" btPow) :float
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_btFmod" btFmod) :float
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_btAtan2Fast" btAtan2Fast) :float
  (y :float)
  (x :float))

(cffi:defcfun ("_wrap_btFuzzyZero" btFuzzyZero) :pointer
  (x :float))

(cffi:defcfun ("_wrap_btEqual" btEqual) :pointer
  (a :float)
  (eps :float))

(cffi:defcfun ("_wrap_btGreaterEqual" btGreaterEqual) :pointer
  (a :float)
  (eps :float))

(cffi:defcfun ("_wrap_btIsNegative" btIsNegative) :int
  (x :float))

(cffi:defcfun ("_wrap_btRadians" btRadians) :float
  (x :float))

(cffi:defcfun ("_wrap_btDegrees" btDegrees) :float
  (x :float))

(cffi:defcfun ("_wrap_btFsel" btFsel) :float
  (a :float)
  (b :float)
  (c :float))

(cffi:defcfun ("_wrap_btMachineIsLittleEndian" btMachineIsLittleEndian) :pointer)

(cffi:defcfun ("_wrap_btSelect__SWIG_0" btSelect) :unsigned-int
  (condition :unsigned-int)
  (valueIfConditionNonZero :unsigned-int)
  (valueIfConditionZero :unsigned-int))

(cffi:defcfun ("_wrap_btSelect__SWIG_1" btSelect) :int
  (condition :unsigned-int)
  (valueIfConditionNonZero :int)
  (valueIfConditionZero :int))

(cffi:defcfun ("_wrap_btSelect__SWIG_2" btSelect) :float
  (condition :unsigned-int)
  (valueIfConditionNonZero :float)
  (valueIfConditionZero :float))

(cffi:defcfun ("_wrap_btSwapEndian__SWIG_0" btSwapEndian) :unsigned-int
  (val :unsigned-int))

(cffi:defcfun ("_wrap_btSwapEndian__SWIG_1" btSwapEndian) :unsigned-short
  (val :unsigned-short))

(cffi:defcfun ("_wrap_btSwapEndian__SWIG_2" btSwapEndian) :unsigned-int
  (val :int))

(cffi:defcfun ("_wrap_btSwapEndian__SWIG_3" btSwapEndian) :unsigned-short
  (val :short))

(cffi:defcfun ("_wrap_btSwapEndianFloat" btSwapEndianFloat) :unsigned-int
  (d :float))

(cffi:defcfun ("_wrap_btUnswapEndianFloat" btUnswapEndianFloat) :float
  (a :unsigned-int))

(cffi:defcfun ("_wrap_btSwapEndianDouble" btSwapEndianDouble) :void
  (d :double)
  (dst :pointer))

(cffi:defcfun ("_wrap_btUnswapEndianDouble" btUnswapEndianDouble) :double
  (src :pointer))

(cffi:defcfun ("_wrap_btNormalizeAngle" btNormalizeAngle) :float
  (angleInRadians :float))

(cffi:defcstruct btTypedObject
	(m_objectType :int)
	(getObjectType :pointer))

(cl:defconstant btVector3DataName "btVector3FloatData")

(cffi:defcfun ("_wrap_btVector3_m_floats_set" btVector3_m_floats_set) :void
  (self :pointer)
  (m_floats :pointer))

(cffi:defcfun ("_wrap_btVector3_m_floats_get" btVector3_m_floats_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btVector3__SWIG_0" new_btVector3) :pointer)

(cffi:defcfun ("_wrap_new_btVector3__SWIG_1" new_btVector3) :pointer
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("_wrap_btVector3___add_assign__" btVector3___add_assign__) :pointer
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3___sub_assign__" btVector3___sub_assign__) :pointer
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3___mul_assign____SWIG_0" btVector3___mul_assign__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btVector3___div_assign__" btVector3___div_assign__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btVector3_dot" btVector3_dot) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_length2" btVector3_length2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_length" btVector3_length) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_distance2" btVector3_distance2) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_distance" btVector3_distance) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_safeNormalize" btVector3_safeNormalize) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_normalize" btVector3_normalize) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_normalized" btVector3_normalized) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_rotate" btVector3_rotate) :pointer
  (self :pointer)
  (wAxis :pointer)
  (angle :float))

(cffi:defcfun ("_wrap_btVector3_angle" btVector3_angle) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_absolute" btVector3_absolute) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_cross" btVector3_cross) :pointer
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_triple" btVector3_triple) :float
  (self :pointer)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btVector3_minAxis" btVector3_minAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_maxAxis" btVector3_maxAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_furthestAxis" btVector3_furthestAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_closestAxis" btVector3_closestAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_setInterpolate3" btVector3_setInterpolate3) :void
  (self :pointer)
  (v0 :pointer)
  (v1 :pointer)
  (rt :float))

(cffi:defcfun ("_wrap_btVector3_lerp" btVector3_lerp) :pointer
  (self :pointer)
  (v :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_btVector3___mul_assign____SWIG_1" btVector3___mul_assign__) :pointer
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_getX" btVector3_getX) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_getY" btVector3_getY) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_getZ" btVector3_getZ) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_setX" btVector3_setX) :void
  (self :pointer)
  (x :float))

(cffi:defcfun ("_wrap_btVector3_setY" btVector3_setY) :void
  (self :pointer)
  (y :float))

(cffi:defcfun ("_wrap_btVector3_setZ" btVector3_setZ) :void
  (self :pointer)
  (z :float))

(cffi:defcfun ("_wrap_btVector3_setW" btVector3_setW) :void
  (self :pointer)
  (w :float))

(cffi:defcfun ("_wrap_btVector3_x" btVector3_x) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_y" btVector3_y) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_z" btVector3_z) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_w" btVector3_w) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3___eq__" btVector3___eq__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btVector3___ne__" btVector3___ne__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btVector3_setMax" btVector3_setMax) :void
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btVector3_setMin" btVector3_setMin) :void
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btVector3_setValue" btVector3_setValue) :void
  (self :pointer)
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("_wrap_btVector3_getSkewSymmetricMatrix" btVector3_getSkewSymmetricMatrix) :void
  (self :pointer)
  (v0 :pointer)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btVector3_setZero" btVector3_setZero) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_isZero" btVector3_isZero) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_fuzzyZero" btVector3_fuzzyZero) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_serialize" btVector3_serialize) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btVector3_deSerialize" btVector3_deSerialize) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btVector3_serializeFloat" btVector3_serializeFloat) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btVector3_deSerializeFloat" btVector3_deSerializeFloat) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btVector3_serializeDouble" btVector3_serializeDouble) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btVector3_deSerializeDouble" btVector3_deSerializeDouble) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_delete_btVector3" delete_btVector3) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDot" btDot) :float
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btDistance2" btDistance2) :float
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btDistance" btDistance) :float
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btAngle" btAngle) :float
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btCross" btCross) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btTriple" btTriple) :float
  (v1 :pointer)
  (v2 :pointer)
  (v3 :pointer))

(cffi:defcfun ("_wrap_lerp" lerp) :pointer
  (v1 :pointer)
  (v2 :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_new_btVector4__SWIG_0" new_btVector4) :pointer)

(cffi:defcfun ("_wrap_new_btVector4__SWIG_1" new_btVector4) :pointer
  (x :pointer)
  (y :pointer)
  (z :pointer)
  (w :pointer))

(cffi:defcfun ("_wrap_btVector4_absolute4" btVector4_absolute4) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_getW" btVector4_getW) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_maxAxis4" btVector4_maxAxis4) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_minAxis4" btVector4_minAxis4) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_closestAxis4" btVector4_closestAxis4) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_setValue" btVector4_setValue) :void
  (self :pointer)
  (x :pointer)
  (y :pointer)
  (z :pointer)
  (w :pointer))

(cffi:defcfun ("_wrap_delete_btVector4" delete_btVector4) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSwapScalarEndian" btSwapScalarEndian) :void
  (sourceVal :pointer)
  (destVal :pointer))

(cffi:defcfun ("_wrap_btSwapVector3Endian" btSwapVector3Endian) :void
  (sourceVec :pointer)
  (destVec :pointer))

(cffi:defcfun ("_wrap_btUnSwapVector3Endian" btUnSwapVector3Endian) :void
  (vector :pointer))

(cffi:defcstruct btVector3FloatData
	(m_floats :pointer))

(cffi:defcstruct btVector3DoubleData
	(m_floats :pointer))

(cffi:defcfun ("_wrap_btQuadWord_getX" btQuadWord_getX) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_getY" btQuadWord_getY) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_getZ" btQuadWord_getZ) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setX" btQuadWord_setX) :void
  (self :pointer)
  (x :float))

(cffi:defcfun ("_wrap_btQuadWord_setY" btQuadWord_setY) :void
  (self :pointer)
  (y :float))

(cffi:defcfun ("_wrap_btQuadWord_setZ" btQuadWord_setZ) :void
  (self :pointer)
  (z :float))

(cffi:defcfun ("_wrap_btQuadWord_setW" btQuadWord_setW) :void
  (self :pointer)
  (w :float))

(cffi:defcfun ("_wrap_btQuadWord_x" btQuadWord_x) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_y" btQuadWord_y) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_z" btQuadWord_z) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_w" btQuadWord_w) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord___eq__" btQuadWord___eq__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btQuadWord___ne__" btQuadWord___ne__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setValue__SWIG_0" btQuadWord_setValue) :void
  (self :pointer)
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setValue__SWIG_1" btQuadWord_setValue) :void
  (self :pointer)
  (x :pointer)
  (y :pointer)
  (z :pointer)
  (w :pointer))

(cffi:defcfun ("_wrap_new_btQuadWord__SWIG_0" new_btQuadWord) :pointer)

(cffi:defcfun ("_wrap_new_btQuadWord__SWIG_1" new_btQuadWord) :pointer
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("_wrap_new_btQuadWord__SWIG_2" new_btQuadWord) :pointer
  (x :pointer)
  (y :pointer)
  (z :pointer)
  (w :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setMax" btQuadWord_setMax) :void
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setMin" btQuadWord_setMin) :void
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_delete_btQuadWord" delete_btQuadWord) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btQuaternion__SWIG_0" new_btQuaternion) :pointer)

(cffi:defcfun ("_wrap_new_btQuaternion__SWIG_1" new_btQuaternion) :pointer
  (x :pointer)
  (y :pointer)
  (z :pointer)
  (w :pointer))

(cffi:defcfun ("_wrap_new_btQuaternion__SWIG_2" new_btQuaternion) :pointer
  (axis :pointer)
  (angle :pointer))

(cffi:defcfun ("_wrap_new_btQuaternion__SWIG_3" new_btQuaternion) :pointer
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btQuaternion_setRotation" btQuaternion_setRotation) :void
  (self :pointer)
  (axis :pointer)
  (angle :pointer))

(cffi:defcfun ("_wrap_btQuaternion_setEuler" btQuaternion_setEuler) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btQuaternion_setEulerZYX" btQuaternion_setEulerZYX) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btQuaternion___add_assign__" btQuaternion___add_assign__) :pointer
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion___sub_assign__" btQuaternion___sub_assign__) :pointer
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion___mul_assign____SWIG_0" btQuaternion___mul_assign__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btQuaternion___mul_assign____SWIG_1" btQuaternion___mul_assign__) :pointer
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion_dot" btQuaternion_dot) :float
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion_length2" btQuaternion_length2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_length" btQuaternion_length) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_normalize" btQuaternion_normalize) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion___mul__" btQuaternion___mul__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btQuaternion___div__" btQuaternion___div__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btQuaternion___div_assign__" btQuaternion___div_assign__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btQuaternion_normalized" btQuaternion_normalized) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_angle" btQuaternion_angle) :float
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion_getAngle" btQuaternion_getAngle) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_getAxis" btQuaternion_getAxis) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_inverse" btQuaternion_inverse) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion___add__" btQuaternion___add__) :pointer
  (self :pointer)
  (q2 :pointer))

(cffi:defcfun ("_wrap_btQuaternion___sub__" btQuaternion___sub__) :pointer
  (self :pointer)
  (q2 :pointer))

(cffi:defcfun ("_wrap_btQuaternion___neg__" btQuaternion___neg__) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_farthest" btQuaternion_farthest) :pointer
  (self :pointer)
  (qd :pointer))

(cffi:defcfun ("_wrap_btQuaternion_nearest" btQuaternion_nearest) :pointer
  (self :pointer)
  (qd :pointer))

(cffi:defcfun ("_wrap_btQuaternion_slerp" btQuaternion_slerp) :pointer
  (self :pointer)
  (q :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_btQuaternion_getIdentity" btQuaternion_getIdentity) :pointer)

(cffi:defcfun ("_wrap_btQuaternion_getW" btQuaternion_getW) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btQuaternion" delete_btQuaternion) :void
  (self :pointer))

(cffi:defcfun ("_wrap_dot" dot) :float
  (q1 :pointer)
  (q2 :pointer))

(cffi:defcfun ("_wrap_length" length) :float
  (q :pointer))

(cffi:defcfun ("_wrap_angle" angle) :float
  (q1 :pointer)
  (q2 :pointer))

(cffi:defcfun ("_wrap_inverse" inverse) :pointer
  (q :pointer))

(cffi:defcfun ("_wrap_slerp" slerp) :pointer
  (q1 :pointer)
  (q2 :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_quatRotate" quatRotate) :pointer
  (rotation :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_shortestArcQuat" shortestArcQuat) :pointer
  (v0 :pointer)
  (v1 :pointer))

(cffi:defcfun ("_wrap_shortestArcQuatNormalize2" shortestArcQuatNormalize2) :pointer
  (v0 :pointer)
  (v1 :pointer))

(cffi:defcfun ("_wrap_new_btMatrix3x3__SWIG_0" new_btMatrix3x3) :pointer)

(cffi:defcfun ("_wrap_new_btMatrix3x3__SWIG_1" new_btMatrix3x3) :pointer
  (q :pointer))

(cffi:defcfun ("_wrap_new_btMatrix3x3__SWIG_2" new_btMatrix3x3) :pointer
  (xx :pointer)
  (xy :pointer)
  (xz :pointer)
  (yx :pointer)
  (yy :pointer)
  (yz :pointer)
  (zx :pointer)
  (zy :pointer)
  (zz :pointer))

(cffi:defcfun ("_wrap_new_btMatrix3x3__SWIG_3" new_btMatrix3x3) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3___assign__" btMatrix3x3___assign__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getColumn" btMatrix3x3_getColumn) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btMatrix3x3_getRow" btMatrix3x3_getRow) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btMatrix3x3___aref____SWIG_0" btMatrix3x3___aref__) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btMatrix3x3___aref____SWIG_1" btMatrix3x3___aref__) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btMatrix3x3___mul_assign__" btMatrix3x3___mul_assign__) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3___add_assign__" btMatrix3x3___add_assign__) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3___sub_assign__" btMatrix3x3___sub_assign__) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setFromOpenGLSubMatrix" btMatrix3x3_setFromOpenGLSubMatrix) :void
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setValue" btMatrix3x3_setValue) :void
  (self :pointer)
  (xx :pointer)
  (xy :pointer)
  (xz :pointer)
  (yx :pointer)
  (yy :pointer)
  (yz :pointer)
  (zx :pointer)
  (zy :pointer)
  (zz :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setRotation" btMatrix3x3_setRotation) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setEulerYPR" btMatrix3x3_setEulerYPR) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setEulerZYX" btMatrix3x3_setEulerZYX) :void
  (self :pointer)
  (eulerX :float)
  (eulerY :float)
  (eulerZ :float))

(cffi:defcfun ("_wrap_btMatrix3x3_setIdentity" btMatrix3x3_setIdentity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getIdentity" btMatrix3x3_getIdentity) :pointer)

(cffi:defcfun ("_wrap_btMatrix3x3_getOpenGLSubMatrix" btMatrix3x3_getOpenGLSubMatrix) :void
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getRotation" btMatrix3x3_getRotation) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getEulerYPR" btMatrix3x3_getEulerYPR) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getEulerZYX__SWIG_0" btMatrix3x3_getEulerZYX) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer)
  (solution_number :unsigned-int))

(cffi:defcfun ("_wrap_btMatrix3x3_getEulerZYX__SWIG_1" btMatrix3x3_getEulerZYX) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_scaled" btMatrix3x3_scaled) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_determinant" btMatrix3x3_determinant) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_adjoint" btMatrix3x3_adjoint) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_absolute" btMatrix3x3_absolute) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_transpose" btMatrix3x3_transpose) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_inverse" btMatrix3x3_inverse) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_transposeTimes" btMatrix3x3_transposeTimes) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_timesTranspose" btMatrix3x3_timesTranspose) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_tdotx" btMatrix3x3_tdotx) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_tdoty" btMatrix3x3_tdoty) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_tdotz" btMatrix3x3_tdotz) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_diagonalize" btMatrix3x3_diagonalize) :void
  (self :pointer)
  (rot :pointer)
  (threshold :float)
  (maxSteps :int))

(cffi:defcfun ("_wrap_btMatrix3x3_cofac" btMatrix3x3_cofac) :float
  (self :pointer)
  (r1 :int)
  (c1 :int)
  (r2 :int)
  (c2 :int))

(cffi:defcfun ("_wrap_btMatrix3x3_serialize" btMatrix3x3_serialize) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_serializeFloat" btMatrix3x3_serializeFloat) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_deSerialize" btMatrix3x3_deSerialize) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_deSerializeFloat" btMatrix3x3_deSerializeFloat) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_deSerializeDouble" btMatrix3x3_deSerializeDouble) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_delete_btMatrix3x3" delete_btMatrix3x3) :void
  (self :pointer))

(cffi:defcstruct btMatrix3x3FloatData
	(m_el :pointer))

(cffi:defcstruct btMatrix3x3DoubleData
	(m_el :pointer))

(cffi:defcfun ("_wrap_new_btTransform__SWIG_0" new_btTransform) :pointer)

(cffi:defcfun ("_wrap_new_btTransform__SWIG_1" new_btTransform) :pointer
  (q :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_new_btTransform__SWIG_2" new_btTransform) :pointer
  (q :pointer))

(cffi:defcfun ("_wrap_new_btTransform__SWIG_3" new_btTransform) :pointer
  (b :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_new_btTransform__SWIG_4" new_btTransform) :pointer
  (b :pointer))

(cffi:defcfun ("_wrap_new_btTransform__SWIG_5" new_btTransform) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_btTransform___assign__" btTransform___assign__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btTransform_mult" btTransform_mult) :void
  (self :pointer)
  (t1 :pointer)
  (t2 :pointer))

(cffi:defcfun ("_wrap_btTransform___funcall__" btTransform___funcall__) :pointer
  (self :pointer)
  (x :pointer))

(cffi:defcfun ("_wrap_btTransform___mul____SWIG_0" btTransform___mul__) :pointer
  (self :pointer)
  (x :pointer))

(cffi:defcfun ("_wrap_btTransform___mul____SWIG_1" btTransform___mul__) :pointer
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btTransform_getBasis__SWIG_0" btTransform_getBasis) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_getBasis__SWIG_1" btTransform_getBasis) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_getOrigin__SWIG_0" btTransform_getOrigin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_getOrigin__SWIG_1" btTransform_getOrigin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_getRotation" btTransform_getRotation) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_setFromOpenGLMatrix" btTransform_setFromOpenGLMatrix) :void
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btTransform_getOpenGLMatrix" btTransform_getOpenGLMatrix) :void
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btTransform_setOrigin" btTransform_setOrigin) :void
  (self :pointer)
  (origin :pointer))

(cffi:defcfun ("_wrap_btTransform_invXform" btTransform_invXform) :pointer
  (self :pointer)
  (inVec :pointer))

(cffi:defcfun ("_wrap_btTransform_setBasis" btTransform_setBasis) :void
  (self :pointer)
  (basis :pointer))

(cffi:defcfun ("_wrap_btTransform_setRotation" btTransform_setRotation) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btTransform_setIdentity" btTransform_setIdentity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform___mul_assign__" btTransform___mul_assign__) :pointer
  (self :pointer)
  (t_arg1 :pointer))

(cffi:defcfun ("_wrap_btTransform_inverse" btTransform_inverse) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_inverseTimes" btTransform_inverseTimes) :pointer
  (self :pointer)
  (t_arg1 :pointer))

(cffi:defcfun ("_wrap_btTransform___mul____SWIG_2" btTransform___mul__) :pointer
  (self :pointer)
  (t_arg1 :pointer))

(cffi:defcfun ("_wrap_btTransform_getIdentity" btTransform_getIdentity) :pointer)

(cffi:defcfun ("_wrap_btTransform_serialize" btTransform_serialize) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btTransform_serializeFloat" btTransform_serializeFloat) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btTransform_deSerialize" btTransform_deSerialize) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btTransform_deSerializeDouble" btTransform_deSerializeDouble) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btTransform_deSerializeFloat" btTransform_deSerializeFloat) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_delete_btTransform" delete_btTransform) :void
  (self :pointer))

(cffi:defcstruct btTransformFloatData
	(m_basis btMatrix3x3FloatData)
	(m_origin btVector3FloatData))

(cffi:defcstruct btTransformDoubleData
	(m_basis btMatrix3x3DoubleData)
	(m_origin btVector3DoubleData))

(cl:defconstant ACTIVE_TAG 1)

(cl:defconstant ISLAND_SLEEPING 2)

(cl:defconstant WANTS_DEACTIVATION 3)

(cl:defconstant DISABLE_DEACTIVATION 4)

(cl:defconstant DISABLE_SIMULATION 5)

(cffi:defcfun ("_wrap_delete_btMotionState" delete_btMotionState) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btMotionState_getWorldTransform" btMotionState_getWorldTransform) :void
  (self :pointer)
  (worldTrans :pointer))

(cffi:defcfun ("_wrap_btMotionState_setWorldTransform" btMotionState_setWorldTransform) :void
  (self :pointer)
  (worldTrans :pointer))

(cffi:defcfun ("_wrap_btAlignedAllocInternal" btAlignedAllocInternal) :pointer
  (size :pointer)
  (alignment :int))

(cffi:defcfun ("_wrap_btAlignedFreeInternal" btAlignedFreeInternal) :void
  (ptr :pointer))

(cffi:defcfun ("_wrap_btAlignedAllocSetCustom" btAlignedAllocSetCustom) :void
  (allocFunc :pointer)
  (freeFunc :pointer))

(cffi:defcfun ("_wrap_btAlignedAllocSetCustomAligned" btAlignedAllocSetCustomAligned) :void
  (allocFunc :pointer)
  (freeFunc :pointer))

(cl:defconstant BT_USE_PLACEMENT_NEW 1)

(cl:defconstant btCollisionObjectDataName "btCollisionObjectFloatData")

(cffi:defcenum CollisionFlags
	(:CF_STATIC_OBJECT #.1)
	(:CF_KINEMATIC_OBJECT #.2)
	(:CF_NO_CONTACT_RESPONSE #.4)
	(:CF_CUSTOM_MATERIAL_CALLBACK #.8)
	(:CF_CHARACTER_OBJECT #.16)
	(:CF_DISABLE_VISUALIZE_OBJECT #.32)
	(:CF_DISABLE_SPU_COLLISION_PROCESSING #.64))

(cffi:defcenum CollisionObjectTypes
	(:CO_COLLISION_OBJECT #.1)
	(:CO_RIGID_BODY #.2)
	(:CO_GHOST_OBJECT #.4)
	(:CO_SOFT_BODY #.8)
	(:CO_HF_FLUID #.16)
	(:CO_USER_TYPE #.32))

(cffi:defcfun ("_wrap_btCollisionObject_mergesSimulationIslands" btCollisionObject_mergesSimulationIslands) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getAnisotropicFriction" btCollisionObject_getAnisotropicFriction) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setAnisotropicFriction" btCollisionObject_setAnisotropicFriction) :void
  (self :pointer)
  (anisotropicFriction :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_hasAnisotropicFriction" btCollisionObject_hasAnisotropicFriction) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setContactProcessingThreshold" btCollisionObject_setContactProcessingThreshold) :void
  (self :pointer)
  (contactProcessingThreshold :float))

(cffi:defcfun ("_wrap_btCollisionObject_getContactProcessingThreshold" btCollisionObject_getContactProcessingThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_isStaticObject" btCollisionObject_isStaticObject) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_isKinematicObject" btCollisionObject_isKinematicObject) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_isStaticOrKinematicObject" btCollisionObject_isStaticOrKinematicObject) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_hasContactResponse" btCollisionObject_hasContactResponse) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCollisionObject" new_btCollisionObject) :pointer)

(cffi:defcfun ("_wrap_delete_btCollisionObject" delete_btCollisionObject) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCollisionShape" btCollisionObject_setCollisionShape) :void
  (self :pointer)
  (collisionShape :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionShape__SWIG_0" btCollisionObject_getCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionShape__SWIG_1" btCollisionObject_getCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getRootCollisionShape__SWIG_0" btCollisionObject_getRootCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getRootCollisionShape__SWIG_1" btCollisionObject_getRootCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_internalSetTemporaryCollisionShape" btCollisionObject_internalSetTemporaryCollisionShape) :void
  (self :pointer)
  (collisionShape :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_internalGetExtensionPointer" btCollisionObject_internalGetExtensionPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_internalSetExtensionPointer" btCollisionObject_internalSetExtensionPointer) :void
  (self :pointer)
  (pointer :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getActivationState" btCollisionObject_getActivationState) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setActivationState" btCollisionObject_setActivationState) :void
  (self :pointer)
  (newState :int))

(cffi:defcfun ("_wrap_btCollisionObject_setDeactivationTime" btCollisionObject_setDeactivationTime) :void
  (self :pointer)
  (time :float))

(cffi:defcfun ("_wrap_btCollisionObject_getDeactivationTime" btCollisionObject_getDeactivationTime) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_forceActivationState" btCollisionObject_forceActivationState) :void
  (self :pointer)
  (newState :int))

(cffi:defcfun ("_wrap_btCollisionObject_activate__SWIG_0" btCollisionObject_activate) :void
  (self :pointer)
  (forceActivation :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_activate__SWIG_1" btCollisionObject_activate) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_isActive" btCollisionObject_isActive) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setRestitution" btCollisionObject_setRestitution) :void
  (self :pointer)
  (rest :float))

(cffi:defcfun ("_wrap_btCollisionObject_getRestitution" btCollisionObject_getRestitution) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setFriction" btCollisionObject_setFriction) :void
  (self :pointer)
  (frict :float))

(cffi:defcfun ("_wrap_btCollisionObject_getFriction" btCollisionObject_getFriction) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInternalType" btCollisionObject_getInternalType) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getWorldTransform__SWIG_0" btCollisionObject_getWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getWorldTransform__SWIG_1" btCollisionObject_getWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setWorldTransform" btCollisionObject_setWorldTransform) :void
  (self :pointer)
  (worldTrans :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getBroadphaseHandle__SWIG_0" btCollisionObject_getBroadphaseHandle) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getBroadphaseHandle__SWIG_1" btCollisionObject_getBroadphaseHandle) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setBroadphaseHandle" btCollisionObject_setBroadphaseHandle) :void
  (self :pointer)
  (handle :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_0" btCollisionObject_getInterpolationWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_1" btCollisionObject_getInterpolationWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationWorldTransform" btCollisionObject_setInterpolationWorldTransform) :void
  (self :pointer)
  (trans :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationLinearVelocity" btCollisionObject_setInterpolationLinearVelocity) :void
  (self :pointer)
  (linvel :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationAngularVelocity" btCollisionObject_setInterpolationAngularVelocity) :void
  (self :pointer)
  (angvel :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationLinearVelocity" btCollisionObject_getInterpolationLinearVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationAngularVelocity" btCollisionObject_getInterpolationAngularVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getIslandTag" btCollisionObject_getIslandTag) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setIslandTag" btCollisionObject_setIslandTag) :void
  (self :pointer)
  (tag :int))

(cffi:defcfun ("_wrap_btCollisionObject_getCompanionId" btCollisionObject_getCompanionId) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCompanionId" btCollisionObject_setCompanionId) :void
  (self :pointer)
  (id :int))

(cffi:defcfun ("_wrap_btCollisionObject_getHitFraction" btCollisionObject_getHitFraction) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setHitFraction" btCollisionObject_setHitFraction) :void
  (self :pointer)
  (hitFraction :float))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionFlags" btCollisionObject_getCollisionFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCollisionFlags" btCollisionObject_setCollisionFlags) :void
  (self :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdSweptSphereRadius" btCollisionObject_getCcdSweptSphereRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCcdSweptSphereRadius" btCollisionObject_setCcdSweptSphereRadius) :void
  (self :pointer)
  (radius :float))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdMotionThreshold" btCollisionObject_getCcdMotionThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdSquareMotionThreshold" btCollisionObject_getCcdSquareMotionThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCcdMotionThreshold" btCollisionObject_setCcdMotionThreshold) :void
  (self :pointer)
  (ccdMotionThreshold :float))

(cffi:defcfun ("_wrap_btCollisionObject_getUserPointer" btCollisionObject_getUserPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setUserPointer" btCollisionObject_setUserPointer) :void
  (self :pointer)
  (userPointer :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_checkCollideWith" btCollisionObject_checkCollideWith) :pointer
  (self :pointer)
  (co :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_calculateSerializeBufferSize" btCollisionObject_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_serialize" btCollisionObject_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_serializeSingleObject" btCollisionObject_serializeSingleObject) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btCollisionObjectDoubleData" new_btCollisionObjectDoubleData) :pointer)

(cffi:defcfun ("_wrap_delete_btCollisionObjectDoubleData" delete_btCollisionObjectDoubleData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCollisionObjectFloatData" new_btCollisionObjectFloatData) :pointer)

(cffi:defcfun ("_wrap_delete_btCollisionObjectFloatData" delete_btCollisionObjectFloatData) :void
  (self :pointer))

(defanonenum 
	(DISPATCH_DISCRETE #.1)
	DISPATCH_CONTINUOUS)

(cffi:defcfun ("_wrap_delete_btDispatcherInfo" delete_btDispatcherInfo) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btDispatcher" delete_btDispatcher) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDispatcher_findAlgorithm__SWIG_0" btDispatcher_findAlgorithm) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer)
  (sharedManifold :pointer))

(cffi:defcfun ("_wrap_btDispatcher_findAlgorithm__SWIG_1" btDispatcher_findAlgorithm) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btDispatcher_getNewManifold" btDispatcher_getNewManifold) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btDispatcher_releaseManifold" btDispatcher_releaseManifold) :void
  (self :pointer)
  (manifold :pointer))

(cffi:defcfun ("_wrap_btDispatcher_clearManifold" btDispatcher_clearManifold) :void
  (self :pointer)
  (manifold :pointer))

(cffi:defcfun ("_wrap_btDispatcher_needsCollision" btDispatcher_needsCollision) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btDispatcher_needsResponse" btDispatcher_needsResponse) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btDispatcher_dispatchAllCollisionPairs" btDispatcher_dispatchAllCollisionPairs) :void
  (self :pointer)
  (pairCache :pointer)
  (dispatchInfo :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDispatcher_getNumManifolds" btDispatcher_getNumManifolds) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDispatcher_getManifoldByIndexInternal" btDispatcher_getManifoldByIndexInternal) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDispatcher_getInternalManifoldPointer" btDispatcher_getInternalManifoldPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDispatcher_getInternalManifoldPool__SWIG_0" btDispatcher_getInternalManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDispatcher_getInternalManifoldPool__SWIG_1" btDispatcher_getInternalManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDispatcher_allocateCollisionAlgorithm" btDispatcher_allocateCollisionAlgorithm) :pointer
  (self :pointer)
  (size :int))

(cffi:defcfun ("_wrap_btDispatcher_freeCollisionAlgorithm" btDispatcher_freeCollisionAlgorithm) :void
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_btAabbSupport" btAabbSupport) :pointer
  (halfExtents :pointer)
  (supportDir :pointer))

(cffi:defcfun ("_wrap_btTransformUtil_integrateTransform" btTransformUtil_integrateTransform) :void
  (curTrans :pointer)
  (linvel :pointer)
  (angvel :pointer)
  (timeStep :float)
  (predictedTransform :pointer))

(cffi:defcfun ("_wrap_btTransformUtil_calculateVelocityQuaternion" btTransformUtil_calculateVelocityQuaternion) :void
  (pos0 :pointer)
  (pos1 :pointer)
  (orn0 :pointer)
  (orn1 :pointer)
  (timeStep :float)
  (linVel :pointer)
  (angVel :pointer))

(cffi:defcfun ("_wrap_btTransformUtil_calculateDiffAxisAngleQuaternion" btTransformUtil_calculateDiffAxisAngleQuaternion) :void
  (orn0 :pointer)
  (orn1a :pointer)
  (axis :pointer)
  (angle :pointer))

(cffi:defcfun ("_wrap_btTransformUtil_calculateVelocity" btTransformUtil_calculateVelocity) :void
  (transform0 :pointer)
  (transform1 :pointer)
  (timeStep :float)
  (linVel :pointer)
  (angVel :pointer))

(cffi:defcfun ("_wrap_btTransformUtil_calculateDiffAxisAngle" btTransformUtil_calculateDiffAxisAngle) :void
  (transform0 :pointer)
  (transform1 :pointer)
  (axis :pointer)
  (angle :pointer))

(cffi:defcfun ("_wrap_new_btTransformUtil" new_btTransformUtil) :pointer)

(cffi:defcfun ("_wrap_delete_btTransformUtil" delete_btTransformUtil) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConvexSeparatingDistanceUtil" new_btConvexSeparatingDistanceUtil) :pointer
  (boundingRadiusA :float)
  (boundingRadiusB :float))

(cffi:defcfun ("_wrap_btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance" btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexSeparatingDistanceUtil_updateSeparatingDistance" btConvexSeparatingDistanceUtil_updateSeparatingDistance) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btConvexSeparatingDistanceUtil_initSeparatingDistance" btConvexSeparatingDistanceUtil_initSeparatingDistance) :void
  (self :pointer)
  (separatingVector :pointer)
  (separatingDistance :float)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_delete_btConvexSeparatingDistanceUtil" delete_btConvexSeparatingDistanceUtil) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConstraintRow" new_btConstraintRow) :pointer)

(cffi:defcfun ("_wrap_delete_btConstraintRow" delete_btConstraintRow) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btManifoldPoint__SWIG_0" new_btManifoldPoint) :pointer)

(cffi:defcfun ("_wrap_new_btManifoldPoint__SWIG_1" new_btManifoldPoint) :pointer
  (pointA :pointer)
  (pointB :pointer)
  (normal :pointer)
  (distance :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_localPointA_set" btManifoldPoint_m_localPointA_set) :void
  (self :pointer)
  (m_localPointA :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_localPointA_get" btManifoldPoint_m_localPointA_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_localPointB_set" btManifoldPoint_m_localPointB_set) :void
  (self :pointer)
  (m_localPointB :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_localPointB_get" btManifoldPoint_m_localPointB_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_positionWorldOnB_set" btManifoldPoint_m_positionWorldOnB_set) :void
  (self :pointer)
  (m_positionWorldOnB :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_positionWorldOnB_get" btManifoldPoint_m_positionWorldOnB_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_positionWorldOnA_set" btManifoldPoint_m_positionWorldOnA_set) :void
  (self :pointer)
  (m_positionWorldOnA :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_positionWorldOnA_get" btManifoldPoint_m_positionWorldOnA_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_normalWorldOnB_set" btManifoldPoint_m_normalWorldOnB_set) :void
  (self :pointer)
  (m_normalWorldOnB :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_normalWorldOnB_get" btManifoldPoint_m_normalWorldOnB_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_distance1_set" btManifoldPoint_m_distance1_set) :void
  (self :pointer)
  (m_distance1 :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_distance1_get" btManifoldPoint_m_distance1_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_combinedFriction_set" btManifoldPoint_m_combinedFriction_set) :void
  (self :pointer)
  (m_combinedFriction :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_combinedFriction_get" btManifoldPoint_m_combinedFriction_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_combinedRestitution_set" btManifoldPoint_m_combinedRestitution_set) :void
  (self :pointer)
  (m_combinedRestitution :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_combinedRestitution_get" btManifoldPoint_m_combinedRestitution_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_partId0_set" btManifoldPoint_m_partId0_set) :void
  (self :pointer)
  (m_partId0 :int))

(cffi:defcfun ("_wrap_btManifoldPoint_m_partId0_get" btManifoldPoint_m_partId0_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_partId1_set" btManifoldPoint_m_partId1_set) :void
  (self :pointer)
  (m_partId1 :int))

(cffi:defcfun ("_wrap_btManifoldPoint_m_partId1_get" btManifoldPoint_m_partId1_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_index0_set" btManifoldPoint_m_index0_set) :void
  (self :pointer)
  (m_index0 :int))

(cffi:defcfun ("_wrap_btManifoldPoint_m_index0_get" btManifoldPoint_m_index0_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_index1_set" btManifoldPoint_m_index1_set) :void
  (self :pointer)
  (m_index1 :int))

(cffi:defcfun ("_wrap_btManifoldPoint_m_index1_get" btManifoldPoint_m_index1_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_userPersistentData_set" btManifoldPoint_m_userPersistentData_set) :void
  (self :pointer)
  (m_userPersistentData :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_userPersistentData_get" btManifoldPoint_m_userPersistentData_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_appliedImpulse_set" btManifoldPoint_m_appliedImpulse_set) :void
  (self :pointer)
  (m_appliedImpulse :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_appliedImpulse_get" btManifoldPoint_m_appliedImpulse_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_lateralFrictionInitialized_set" btManifoldPoint_m_lateralFrictionInitialized_set) :void
  (self :pointer)
  (m_lateralFrictionInitialized :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_lateralFrictionInitialized_get" btManifoldPoint_m_lateralFrictionInitialized_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_appliedImpulseLateral1_set" btManifoldPoint_m_appliedImpulseLateral1_set) :void
  (self :pointer)
  (m_appliedImpulseLateral1 :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_appliedImpulseLateral1_get" btManifoldPoint_m_appliedImpulseLateral1_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_appliedImpulseLateral2_set" btManifoldPoint_m_appliedImpulseLateral2_set) :void
  (self :pointer)
  (m_appliedImpulseLateral2 :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_appliedImpulseLateral2_get" btManifoldPoint_m_appliedImpulseLateral2_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_contactMotion1_set" btManifoldPoint_m_contactMotion1_set) :void
  (self :pointer)
  (m_contactMotion1 :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_contactMotion1_get" btManifoldPoint_m_contactMotion1_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_contactMotion2_set" btManifoldPoint_m_contactMotion2_set) :void
  (self :pointer)
  (m_contactMotion2 :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_contactMotion2_get" btManifoldPoint_m_contactMotion2_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_contactCFM1_set" btManifoldPoint_m_contactCFM1_set) :void
  (self :pointer)
  (m_contactCFM1 :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_contactCFM1_get" btManifoldPoint_m_contactCFM1_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_contactCFM2_set" btManifoldPoint_m_contactCFM2_set) :void
  (self :pointer)
  (m_contactCFM2 :float))

(cffi:defcfun ("_wrap_btManifoldPoint_m_contactCFM2_get" btManifoldPoint_m_contactCFM2_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_lifeTime_set" btManifoldPoint_m_lifeTime_set) :void
  (self :pointer)
  (m_lifeTime :int))

(cffi:defcfun ("_wrap_btManifoldPoint_m_lifeTime_get" btManifoldPoint_m_lifeTime_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_lateralFrictionDir1_set" btManifoldPoint_m_lateralFrictionDir1_set) :void
  (self :pointer)
  (m_lateralFrictionDir1 :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_lateralFrictionDir1_get" btManifoldPoint_m_lateralFrictionDir1_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_lateralFrictionDir2_set" btManifoldPoint_m_lateralFrictionDir2_set) :void
  (self :pointer)
  (m_lateralFrictionDir2 :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_m_lateralFrictionDir2_get" btManifoldPoint_m_lateralFrictionDir2_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_mConstraintRow_set" btManifoldPoint_mConstraintRow_set) :void
  (self :pointer)
  (mConstraintRow :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_mConstraintRow_get" btManifoldPoint_mConstraintRow_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_getDistance" btManifoldPoint_getDistance) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_getLifeTime" btManifoldPoint_getLifeTime) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_getPositionWorldOnA" btManifoldPoint_getPositionWorldOnA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_getPositionWorldOnB" btManifoldPoint_getPositionWorldOnB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldPoint_setDistance" btManifoldPoint_setDistance) :void
  (self :pointer)
  (dist :float))

(cffi:defcfun ("_wrap_btManifoldPoint_getAppliedImpulse" btManifoldPoint_getAppliedImpulse) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btManifoldPoint" delete_btManifoldPoint) :void
  (self :pointer))

(cffi:defcvar ("gContactBreakingThreshold" gContactBreakingThreshold)
 :float)

(cffi:defcvar ("gContactDestroyedCallback" gContactDestroyedCallback)
 :pointer)

(cffi:defcvar ("gContactProcessedCallback" gContactProcessedCallback)
 :pointer)

(cffi:defcenum btContactManifoldTypes
	(:MIN_CONTACT_MANIFOLD_TYPE #.1024)
	:BT_PERSISTENT_MANIFOLD_TYPE)

(cl:defconstant MANIFOLD_CACHE_SIZE 4)

(cffi:defcfun ("_wrap_btPersistentManifold_m_companionIdA_set" btPersistentManifold_m_companionIdA_set) :void
  (self :pointer)
  (m_companionIdA :int))

(cffi:defcfun ("_wrap_btPersistentManifold_m_companionIdA_get" btPersistentManifold_m_companionIdA_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_m_companionIdB_set" btPersistentManifold_m_companionIdB_set) :void
  (self :pointer)
  (m_companionIdB :int))

(cffi:defcfun ("_wrap_btPersistentManifold_m_companionIdB_get" btPersistentManifold_m_companionIdB_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_m_index1a_set" btPersistentManifold_m_index1a_set) :void
  (self :pointer)
  (m_index1a :int))

(cffi:defcfun ("_wrap_btPersistentManifold_m_index1a_get" btPersistentManifold_m_index1a_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_new_btPersistentManifold__SWIG_0" new_btPersistentManifold) :pointer)

(cffi:defcfun ("_wrap_new_btPersistentManifold__SWIG_1" new_btPersistentManifold) :pointer
  (body0 :pointer)
  (body1 :pointer)
  (arg2 :int)
  (contactBreakingThreshold :float)
  (contactProcessingThreshold :float))

(cffi:defcfun ("_wrap_btPersistentManifold_getBody0__SWIG_0" btPersistentManifold_getBody0) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_getBody1__SWIG_0" btPersistentManifold_getBody1) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_getBody0__SWIG_1" btPersistentManifold_getBody0) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_getBody1__SWIG_1" btPersistentManifold_getBody1) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_setBodies" btPersistentManifold_setBodies) :void
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_clearUserCache" btPersistentManifold_clearUserCache) :void
  (self :pointer)
  (pt :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_getNumContacts" btPersistentManifold_getNumContacts) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_getContactPoint__SWIG_0" btPersistentManifold_getContactPoint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btPersistentManifold_getContactPoint__SWIG_1" btPersistentManifold_getContactPoint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btPersistentManifold_getContactBreakingThreshold" btPersistentManifold_getContactBreakingThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_getContactProcessingThreshold" btPersistentManifold_getContactProcessingThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_getCacheEntry" btPersistentManifold_getCacheEntry) :int
  (self :pointer)
  (newPoint :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_addManifoldPoint" btPersistentManifold_addManifoldPoint) :int
  (self :pointer)
  (newPoint :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_removeContactPoint" btPersistentManifold_removeContactPoint) :void
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btPersistentManifold_replaceContactPoint" btPersistentManifold_replaceContactPoint) :void
  (self :pointer)
  (newPoint :pointer)
  (insertIndex :int))

(cffi:defcfun ("_wrap_btPersistentManifold_validContactDistance" btPersistentManifold_validContactDistance) :pointer
  (self :pointer)
  (pt :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_refreshContactPoints" btPersistentManifold_refreshContactPoints) :void
  (self :pointer)
  (trA :pointer)
  (trB :pointer))

(cffi:defcfun ("_wrap_btPersistentManifold_clearManifold" btPersistentManifold_clearManifold) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btPersistentManifold" delete_btPersistentManifold) :void
  (self :pointer))

(cffi:defcvar ("gContactAddedCallback" gContactAddedCallback)
 :pointer)

(cffi:defcfun ("_wrap_new_btManifoldResult__SWIG_0" new_btManifoldResult) :pointer)

(cffi:defcfun ("_wrap_new_btManifoldResult__SWIG_1" new_btManifoldResult) :pointer
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_delete_btManifoldResult" delete_btManifoldResult) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldResult_setPersistentManifold" btManifoldResult_setPersistentManifold) :void
  (self :pointer)
  (manifoldPtr :pointer))

(cffi:defcfun ("_wrap_btManifoldResult_getPersistentManifold__SWIG_0" btManifoldResult_getPersistentManifold) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldResult_getPersistentManifold__SWIG_1" btManifoldResult_getPersistentManifold) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldResult_setShapeIdentifiersA" btManifoldResult_setShapeIdentifiersA) :void
  (self :pointer)
  (partId0 :int)
  (index0 :int))

(cffi:defcfun ("_wrap_btManifoldResult_setShapeIdentifiersB" btManifoldResult_setShapeIdentifiersB) :void
  (self :pointer)
  (partId1 :int)
  (index1 :int))

(cffi:defcfun ("_wrap_btManifoldResult_addContactPoint" btManifoldResult_addContactPoint) :void
  (self :pointer)
  (normalOnBInWorld :pointer)
  (pointInWorld :pointer)
  (depth :float))

(cffi:defcfun ("_wrap_btManifoldResult_refreshContactPoints" btManifoldResult_refreshContactPoints) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldResult_getBody0Internal" btManifoldResult_getBody0Internal) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btManifoldResult_getBody1Internal" btManifoldResult_getBody1Internal) :pointer
  (self :pointer))

(cffi:defcenum BroadphaseNativeTypes
	:BOX_SHAPE_PROXYTYPE
	:TRIANGLE_SHAPE_PROXYTYPE
	:TETRAHEDRAL_SHAPE_PROXYTYPE
	:CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE
	:CONVEX_HULL_SHAPE_PROXYTYPE
	:CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE
	:CUSTOM_POLYHEDRAL_SHAPE_TYPE
	:IMPLICIT_CONVEX_SHAPES_START_HERE
	:SPHERE_SHAPE_PROXYTYPE
	:MULTI_SPHERE_SHAPE_PROXYTYPE
	:CAPSULE_SHAPE_PROXYTYPE
	:CONE_SHAPE_PROXYTYPE
	:CONVEX_SHAPE_PROXYTYPE
	:CYLINDER_SHAPE_PROXYTYPE
	:UNIFORM_SCALING_SHAPE_PROXYTYPE
	:MINKOWSKI_SUM_SHAPE_PROXYTYPE
	:MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE
	:BOX_2D_SHAPE_PROXYTYPE
	:CONVEX_2D_SHAPE_PROXYTYPE
	:CUSTOM_CONVEX_SHAPE_TYPE
	:CONCAVE_SHAPES_START_HERE
	:TRIANGLE_MESH_SHAPE_PROXYTYPE
	:SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE
	:FAST_CONCAVE_MESH_PROXYTYPE
	:TERRAIN_SHAPE_PROXYTYPE
	:GIMPACT_SHAPE_PROXYTYPE
	:MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE
	:EMPTY_SHAPE_PROXYTYPE
	:STATIC_PLANE_PROXYTYPE
	:CUSTOM_CONCAVE_SHAPE_TYPE
	:CONCAVE_SHAPES_END_HERE
	:COMPOUND_SHAPE_PROXYTYPE
	:SOFTBODY_SHAPE_PROXYTYPE
	:HFFLUID_SHAPE_PROXYTYPE
	:HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE
	:INVALID_SHAPE_PROXYTYPE
	:MAX_BROADPHASE_COLLISION_TYPES)

(defanonenum 
	(DefaultFilter #.1)
	(StaticFilter #.2)
	(KinematicFilter #.4)
	(DebrisFilter #.8)
	(SensorTrigger #.16)
	(CharacterFilter #.32)
	(AllFilter #.-1))

(cffi:defcfun ("_wrap_delete_btBroadphaseProxy" delete_btBroadphaseProxy) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btBroadphasePair" delete_btBroadphasePair) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btBroadphasePairSortPredicate___funcall__" btBroadphasePairSortPredicate___funcall__) :pointer
  (self :pointer)
  (a :pointer)
  (b :pointer))

(cffi:defcfun ("_wrap_new_btBroadphasePairSortPredicate" new_btBroadphasePairSortPredicate) :pointer)

(cffi:defcfun ("_wrap_delete_btBroadphasePairSortPredicate" delete_btBroadphasePairSortPredicate) :void
  (self :pointer))

(cffi:defcfun ("_wrap___eq____SWIG_1" __eq__) :pointer
  (a :pointer)
  (b :pointer))

(cl:defconstant USE_DISPATCH_REGISTRY_ARRAY 1)

(cffi:defcenum DispatcherFlags
	(:CD_STATIC_STATIC_REPORTED #.1)
	(:CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD #.2)
	(:CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION #.4))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getDispatcherFlags" btCollisionDispatcher_getDispatcherFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_setDispatcherFlags" btCollisionDispatcher_setDispatcherFlags) :void
  (self :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_btCollisionDispatcher_registerCollisionCreateFunc" btCollisionDispatcher_registerCollisionCreateFunc) :void
  (self :pointer)
  (proxyType0 :int)
  (proxyType1 :int)
  (createFunc :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getNumManifolds" btCollisionDispatcher_getNumManifolds) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getInternalManifoldPointer" btCollisionDispatcher_getInternalManifoldPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0" btCollisionDispatcher_getManifoldByIndexInternal) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_1" btCollisionDispatcher_getManifoldByIndexInternal) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_new_btCollisionDispatcher" new_btCollisionDispatcher) :pointer
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionDispatcher" delete_btCollisionDispatcher) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getNewManifold" btCollisionDispatcher_getNewManifold) :pointer
  (self :pointer)
  (b0 :pointer)
  (b1 :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_releaseManifold" btCollisionDispatcher_releaseManifold) :void
  (self :pointer)
  (manifold :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_clearManifold" btCollisionDispatcher_clearManifold) :void
  (self :pointer)
  (manifold :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_findAlgorithm__SWIG_0" btCollisionDispatcher_findAlgorithm) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer)
  (sharedManifold :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_findAlgorithm__SWIG_1" btCollisionDispatcher_findAlgorithm) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_needsCollision" btCollisionDispatcher_needsCollision) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_needsResponse" btCollisionDispatcher_needsResponse) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_dispatchAllCollisionPairs" btCollisionDispatcher_dispatchAllCollisionPairs) :void
  (self :pointer)
  (pairCache :pointer)
  (dispatchInfo :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_setNearCallback" btCollisionDispatcher_setNearCallback) :void
  (self :pointer)
  (nearCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getNearCallback" btCollisionDispatcher_getNearCallback) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_defaultNearCallback" btCollisionDispatcher_defaultNearCallback) :void
  (collisionPair :pointer)
  (dispatcher :pointer)
  (dispatchInfo :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_allocateCollisionAlgorithm" btCollisionDispatcher_allocateCollisionAlgorithm) :pointer
  (self :pointer)
  (size :int))

(cffi:defcfun ("_wrap_btCollisionDispatcher_freeCollisionAlgorithm" btCollisionDispatcher_freeCollisionAlgorithm) :void
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_0" btCollisionDispatcher_getCollisionConfiguration) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_1" btCollisionDispatcher_getCollisionConfiguration) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_setCollisionConfiguration" btCollisionDispatcher_setCollisionConfiguration) :void
  (self :pointer)
  (config :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_0" btCollisionDispatcher_getInternalManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_1" btCollisionDispatcher_getInternalManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btBroadphaseInterface" delete_btBroadphaseInterface) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_createProxy" btBroadphaseInterface_createProxy) :pointer
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (shapeType :int)
  (userPtr :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short)
  (dispatcher :pointer)
  (multiSapProxy :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_destroyProxy" btBroadphaseInterface_destroyProxy) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_setAabb" btBroadphaseInterface_setAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_getAabb" btBroadphaseInterface_getAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_rayTest__SWIG_0" btBroadphaseInterface_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_rayTest__SWIG_1" btBroadphaseInterface_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_rayTest__SWIG_2" btBroadphaseInterface_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_aabbTest" btBroadphaseInterface_aabbTest) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (callback :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_calculateOverlappingPairs" btBroadphaseInterface_calculateOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_0" btBroadphaseInterface_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_1" btBroadphaseInterface_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_getBroadphaseAabb" btBroadphaseInterface_getBroadphaseAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_resetPool" btBroadphaseInterface_resetPool) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_printStats" btBroadphaseInterface_printStats) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btOverlappingPairCallback" delete_btOverlappingPairCallback) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCallback_addOverlappingPair" btOverlappingPairCallback_addOverlappingPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCallback_removeOverlappingPair" btOverlappingPairCallback_removeOverlappingPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCallback_removeOverlappingPairsContainingProxy" btOverlappingPairCallback_removeOverlappingPairsContainingProxy) :void
  (self :pointer)
  (proxy0 :pointer)
  (dispatcher :pointer))

(cffi:defcvar ("gRemovePairs" gRemovePairs)
 :int)

(cffi:defcvar ("gAddedPairs" gAddedPairs)
 :int)

(cffi:defcvar ("gFindPairs" gFindPairs)
 :int)

(cffi:defcvar ("BT_NULL_PAIR" BT_NULL_PAIR)
 :int)

(cffi:defcfun ("_wrap_delete_btOverlappingPairCache" delete_btOverlappingPairCache) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0" btOverlappingPairCache_getOverlappingPairArrayPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1" btOverlappingPairCache_getOverlappingPairArrayPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_getOverlappingPairArray" btOverlappingPairCache_getOverlappingPairArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_cleanOverlappingPair" btOverlappingPairCache_cleanOverlappingPair) :void
  (self :pointer)
  (pair :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_getNumOverlappingPairs" btOverlappingPairCache_getNumOverlappingPairs) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_cleanProxyFromPairs" btOverlappingPairCache_cleanProxyFromPairs) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_setOverlapFilterCallback" btOverlappingPairCache_setOverlapFilterCallback) :void
  (self :pointer)
  (callback :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_processAllOverlappingPairs" btOverlappingPairCache_processAllOverlappingPairs) :void
  (self :pointer)
  (arg1 :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_findPair" btOverlappingPairCache_findPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_hasDeferredRemoval" btOverlappingPairCache_hasDeferredRemoval) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_setInternalGhostPairCallback" btOverlappingPairCache_setInternalGhostPairCallback) :void
  (self :pointer)
  (ghostPairCallback :pointer))

(cffi:defcfun ("_wrap_btOverlappingPairCache_sortOverlappingPairs" btOverlappingPairCache_sortOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_new_btHashedOverlappingPairCache" new_btHashedOverlappingPairCache) :pointer)

(cffi:defcfun ("_wrap_delete_btHashedOverlappingPairCache" delete_btHashedOverlappingPairCache) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy" btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_removeOverlappingPair" btHashedOverlappingPairCache_removeOverlappingPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_needsBroadphaseCollision" btHashedOverlappingPairCache_needsBroadphaseCollision) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_addOverlappingPair" btHashedOverlappingPairCache_addOverlappingPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_cleanProxyFromPairs" btHashedOverlappingPairCache_cleanProxyFromPairs) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_processAllOverlappingPairs" btHashedOverlappingPairCache_processAllOverlappingPairs) :void
  (self :pointer)
  (arg1 :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0" btHashedOverlappingPairCache_getOverlappingPairArrayPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1" btHashedOverlappingPairCache_getOverlappingPairArrayPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_0" btHashedOverlappingPairCache_getOverlappingPairArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_1" btHashedOverlappingPairCache_getOverlappingPairArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_cleanOverlappingPair" btHashedOverlappingPairCache_cleanOverlappingPair) :void
  (self :pointer)
  (pair :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_findPair" btHashedOverlappingPairCache_findPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_GetCount" btHashedOverlappingPairCache_GetCount) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_getOverlapFilterCallback" btHashedOverlappingPairCache_getOverlapFilterCallback) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_setOverlapFilterCallback" btHashedOverlappingPairCache_setOverlapFilterCallback) :void
  (self :pointer)
  (callback :pointer))

(cffi:defcfun ("_wrap_btHashedOverlappingPairCache_getNumOverlappingPairs" btHashedOverlappingPairCache_getNumOverlappingPairs) :int
  (self :pointer))

(cffi:defcfun ("_wrap_new_btSortedOverlappingPairCache" new_btSortedOverlappingPairCache) :pointer)

(cffi:defcfun ("_wrap_delete_btSortedOverlappingPairCache" delete_btSortedOverlappingPairCache) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_processAllOverlappingPairs" btSortedOverlappingPairCache_processAllOverlappingPairs) :void
  (self :pointer)
  (arg1 :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_removeOverlappingPair" btSortedOverlappingPairCache_removeOverlappingPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_cleanOverlappingPair" btSortedOverlappingPairCache_cleanOverlappingPair) :void
  (self :pointer)
  (pair :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_addOverlappingPair" btSortedOverlappingPairCache_addOverlappingPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_findPair" btSortedOverlappingPairCache_findPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_cleanProxyFromPairs" btSortedOverlappingPairCache_cleanProxyFromPairs) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy" btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_needsBroadphaseCollision" btSortedOverlappingPairCache_needsBroadphaseCollision) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_0" btSortedOverlappingPairCache_getOverlappingPairArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_1" btSortedOverlappingPairCache_getOverlappingPairArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0" btSortedOverlappingPairCache_getOverlappingPairArrayPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1" btSortedOverlappingPairCache_getOverlappingPairArrayPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_getNumOverlappingPairs" btSortedOverlappingPairCache_getNumOverlappingPairs) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_getOverlapFilterCallback" btSortedOverlappingPairCache_getOverlapFilterCallback) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_setOverlapFilterCallback" btSortedOverlappingPairCache_setOverlapFilterCallback) :void
  (self :pointer)
  (callback :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_hasDeferredRemoval" btSortedOverlappingPairCache_hasDeferredRemoval) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_setInternalGhostPairCallback" btSortedOverlappingPairCache_setInternalGhostPairCallback) :void
  (self :pointer)
  (ghostPairCallback :pointer))

(cffi:defcfun ("_wrap_btSortedOverlappingPairCache_sortOverlappingPairs" btSortedOverlappingPairCache_sortOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_getOverlappingPairArrayPtr__SWIG_0" btNullPairCache_getOverlappingPairArrayPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_getOverlappingPairArrayPtr__SWIG_1" btNullPairCache_getOverlappingPairArrayPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_getOverlappingPairArray" btNullPairCache_getOverlappingPairArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_cleanOverlappingPair" btNullPairCache_cleanOverlappingPair) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_getNumOverlappingPairs" btNullPairCache_getNumOverlappingPairs) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_cleanProxyFromPairs" btNullPairCache_cleanProxyFromPairs) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_setOverlapFilterCallback" btNullPairCache_setOverlapFilterCallback) :void
  (self :pointer)
  (arg1 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_processAllOverlappingPairs" btNullPairCache_processAllOverlappingPairs) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_findPair" btNullPairCache_findPair) :pointer
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_hasDeferredRemoval" btNullPairCache_hasDeferredRemoval) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_setInternalGhostPairCallback" btNullPairCache_setInternalGhostPairCallback) :void
  (self :pointer)
  (arg1 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_addOverlappingPair" btNullPairCache_addOverlappingPair) :pointer
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_removeOverlappingPair" btNullPairCache_removeOverlappingPair) :pointer
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_removeOverlappingPairsContainingProxy" btNullPairCache_removeOverlappingPairsContainingProxy) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("_wrap_btNullPairCache_sortOverlappingPairs" btNullPairCache_sortOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_new_btNullPairCache" new_btNullPairCache) :pointer)

(cffi:defcfun ("_wrap_delete_btNullPairCache" delete_btNullPairCache) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCollisionWorld" new_btCollisionWorld) :pointer
  (dispatcher :pointer)
  (broadphasePairCache :pointer)
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionWorld" delete_btCollisionWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_setBroadphase" btCollisionWorld_setBroadphase) :void
  (self :pointer)
  (pairCache :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getBroadphase__SWIG_0" btCollisionWorld_getBroadphase) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getBroadphase__SWIG_1" btCollisionWorld_getBroadphase) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getPairCache" btCollisionWorld_getPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatcher__SWIG_0" btCollisionWorld_getDispatcher) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatcher__SWIG_1" btCollisionWorld_getDispatcher) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_updateSingleAabb" btCollisionWorld_updateSingleAabb) :void
  (self :pointer)
  (colObj :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_updateAabbs" btCollisionWorld_updateAabbs) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_setDebugDrawer" btCollisionWorld_setDebugDrawer) :void
  (self :pointer)
  (debugDrawer :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDebugDrawer" btCollisionWorld_getDebugDrawer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_debugDrawWorld" btCollisionWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_debugDrawObject" btCollisionWorld_debugDrawObject) :void
  (self :pointer)
  (worldTransform :pointer)
  (shape :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getNumCollisionObjects" btCollisionWorld_getNumCollisionObjects) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_rayTest" btCollisionWorld_rayTest) :void
  (self :pointer)
  (rayFromWorld :pointer)
  (rayToWorld :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_convexSweepTest__SWIG_0" btCollisionWorld_convexSweepTest) :void
  (self :pointer)
  (castShape :pointer)
  (from :pointer)
  (to :pointer)
  (resultCallback :pointer)
  (allowedCcdPenetration :float))

(cffi:defcfun ("_wrap_btCollisionWorld_convexSweepTest__SWIG_1" btCollisionWorld_convexSweepTest) :void
  (self :pointer)
  (castShape :pointer)
  (from :pointer)
  (to :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_contactTest" btCollisionWorld_contactTest) :void
  (self :pointer)
  (colObj :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_contactPairTest" btCollisionWorld_contactPairTest) :void
  (self :pointer)
  (colObjA :pointer)
  (colObjB :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_rayTestSingle" btCollisionWorld_rayTestSingle) :void
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObject :pointer)
  (collisionShape :pointer)
  (colObjWorldTransform :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_objectQuerySingle" btCollisionWorld_objectQuerySingle) :void
  (castShape :pointer)
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObject :pointer)
  (collisionShape :pointer)
  (colObjWorldTransform :pointer)
  (resultCallback :pointer)
  (allowedPenetration :float))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_0" btCollisionWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_1" btCollisionWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_2" btCollisionWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getCollisionObjectArray__SWIG_0" btCollisionWorld_getCollisionObjectArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getCollisionObjectArray__SWIG_1" btCollisionWorld_getCollisionObjectArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_removeCollisionObject" btCollisionWorld_removeCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_performDiscreteCollisionDetection" btCollisionWorld_performDiscreteCollisionDetection) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatchInfo__SWIG_0" btCollisionWorld_getDispatchInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatchInfo__SWIG_1" btCollisionWorld_getDispatchInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getForceUpdateAllAabbs" btCollisionWorld_getForceUpdateAllAabbs) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_setForceUpdateAllAabbs" btCollisionWorld_setForceUpdateAllAabbs) :void
  (self :pointer)
  (forceUpdateAllAabbs :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_serialize" btCollisionWorld_serialize) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionShape" delete_btCollisionShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getAabb" btCollisionShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getBoundingSphere" btCollisionShape_getBoundingSphere) :void
  (self :pointer)
  (center :pointer)
  (radius :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getAngularMotionDisc" btCollisionShape_getAngularMotionDisc) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getContactBreakingThreshold" btCollisionShape_getContactBreakingThreshold) :float
  (self :pointer)
  (defaultContactThresholdFactor :float))

(cffi:defcfun ("_wrap_btCollisionShape_calculateTemporalAabb" btCollisionShape_calculateTemporalAabb) :void
  (self :pointer)
  (curTrans :pointer)
  (linvel :pointer)
  (angvel :pointer)
  (timeStep :float)
  (temporalAabbMin :pointer)
  (temporalAabbMax :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isPolyhedral" btCollisionShape_isPolyhedral) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isConvex2d" btCollisionShape_isConvex2d) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isConvex" btCollisionShape_isConvex) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isNonMoving" btCollisionShape_isNonMoving) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isConcave" btCollisionShape_isConcave) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isCompound" btCollisionShape_isCompound) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isSoftBody" btCollisionShape_isSoftBody) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isInfinite" btCollisionShape_isInfinite) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_setLocalScaling" btCollisionShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getLocalScaling" btCollisionShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_calculateLocalInertia" btCollisionShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getName" btCollisionShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getShapeType" btCollisionShape_getShapeType) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_setMargin" btCollisionShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btCollisionShape_getMargin" btCollisionShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_setUserPointer" btCollisionShape_setUserPointer) :void
  (self :pointer)
  (userPtr :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getUserPointer" btCollisionShape_getUserPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_calculateSerializeBufferSize" btCollisionShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_serialize" btCollisionShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_serializeSingleShape" btCollisionShape_serializeSingleShape) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btCollisionShapeData" new_btCollisionShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btCollisionShapeData" delete_btCollisionShapeData) :void
  (self :pointer))

(cl:defconstant MAX_PREFERRED_PENETRATION_DIRECTIONS 10)

(cffi:defcfun ("_wrap_delete_btConvexShape" delete_btConvexShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_localGetSupportingVertex" btConvexShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexShape_localGetSupportingVertexWithoutMargin" btConvexShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexShape_localGetSupportVertexWithoutMarginNonVirtual" btConvexShape_localGetSupportVertexWithoutMarginNonVirtual) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexShape_localGetSupportVertexNonVirtual" btConvexShape_localGetSupportVertexNonVirtual) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getMarginNonVirtual" btConvexShape_getMarginNonVirtual) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getAabbNonVirtual" btConvexShape_getAabbNonVirtual) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexShape_project" btConvexShape_project) :void
  (self :pointer)
  (trans :pointer)
  (dir :pointer)
  (min :pointer)
  (max :pointer))

(cffi:defcfun ("_wrap_btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btConvexShape_getAabb" btConvexShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getAabbSlow" btConvexShape_getAabbSlow) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexShape_setLocalScaling" btConvexShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getLocalScaling" btConvexShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_setMargin" btConvexShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btConvexShape_getMargin" btConvexShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getNumPreferredPenetrationDirections" btConvexShape_getNumPreferredPenetrationDirections) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getPreferredPenetrationDirection" btConvexShape_getPreferredPenetrationDirection) :void
  (self :pointer)
  (index :int)
  (penetrationVector :pointer))

(cffi:defcfun ("_wrap_AabbExpand" AabbExpand) :void
  (aabbMin :pointer)
  (aabbMax :pointer)
  (expansionMin :pointer)
  (expansionMax :pointer))

(cffi:defcfun ("_wrap_TestPointAgainstAabb2" TestPointAgainstAabb2) :pointer
  (aabbMin1 :pointer)
  (aabbMax1 :pointer)
  (point :pointer))

(cffi:defcfun ("_wrap_TestAabbAgainstAabb2" TestAabbAgainstAabb2) :pointer
  (aabbMin1 :pointer)
  (aabbMax1 :pointer)
  (aabbMin2 :pointer)
  (aabbMax2 :pointer))

(cffi:defcfun ("_wrap_TestTriangleAgainstAabb2" TestTriangleAgainstAabb2) :pointer
  (vertices :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btOutcode" btOutcode) :int
  (p :pointer)
  (halfExtent :pointer))

(cffi:defcfun ("_wrap_btRayAabb2" btRayAabb2) :pointer
  (rayFrom :pointer)
  (rayInvDirection :pointer)
  (raySign :pointer)
  (bounds :pointer)
  (tmin :pointer)
  (lambda_min :float)
  (lambda_max :float))

(cffi:defcfun ("_wrap_btRayAabb" btRayAabb) :pointer
  (rayFrom :pointer)
  (rayTo :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (param :pointer)
  (normal :pointer))

(cffi:defcfun ("_wrap_btTransformAabb__SWIG_0" btTransformAabb) :void
  (halfExtents :pointer)
  (margin :float)
  (t_arg2 :pointer)
  (aabbMinOut :pointer)
  (aabbMaxOut :pointer))

(cffi:defcfun ("_wrap_btTransformAabb__SWIG_1" btTransformAabb) :void
  (localAabbMin :pointer)
  (localAabbMax :pointer)
  (margin :float)
  (trans :pointer)
  (aabbMinOut :pointer)
  (aabbMaxOut :pointer))

(cl:defconstant USE_BANCHLESS 1)

(cffi:defcfun ("_wrap_testQuantizedAabbAgainstQuantizedAabb" testQuantizedAabbAgainstQuantizedAabb) :unsigned-int
  (aabbMin1 :pointer)
  (aabbMax1 :pointer)
  (aabbMin2 :pointer)
  (aabbMax2 :pointer))

(cffi:defcfun ("_wrap_delete_btConvexInternalShape" delete_btConvexInternalShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_localGetSupportingVertex" btConvexInternalShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getImplicitShapeDimensions" btConvexInternalShape_getImplicitShapeDimensions) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_setImplicitShapeDimensions" btConvexInternalShape_setImplicitShapeDimensions) :void
  (self :pointer)
  (dimensions :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_setSafeMargin__SWIG_0" btConvexInternalShape_setSafeMargin) :void
  (self :pointer)
  (minDimension :float)
  (defaultMarginMultiplier :float))

(cffi:defcfun ("_wrap_btConvexInternalShape_setSafeMargin__SWIG_1" btConvexInternalShape_setSafeMargin) :void
  (self :pointer)
  (minDimension :float))

(cffi:defcfun ("_wrap_btConvexInternalShape_setSafeMargin__SWIG_2" btConvexInternalShape_setSafeMargin) :void
  (self :pointer)
  (halfExtents :pointer)
  (defaultMarginMultiplier :float))

(cffi:defcfun ("_wrap_btConvexInternalShape_setSafeMargin__SWIG_3" btConvexInternalShape_setSafeMargin) :void
  (self :pointer)
  (halfExtents :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getAabb" btConvexInternalShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getAabbSlow" btConvexInternalShape_getAabbSlow) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_setLocalScaling" btConvexInternalShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getLocalScaling" btConvexInternalShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getLocalScalingNV" btConvexInternalShape_getLocalScalingNV) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_setMargin" btConvexInternalShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btConvexInternalShape_getMargin" btConvexInternalShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getMarginNV" btConvexInternalShape_getMarginNV) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getNumPreferredPenetrationDirections" btConvexInternalShape_getNumPreferredPenetrationDirections) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getPreferredPenetrationDirection" btConvexInternalShape_getPreferredPenetrationDirection) :void
  (self :pointer)
  (index :int)
  (penetrationVector :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_calculateSerializeBufferSize" btConvexInternalShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_serialize" btConvexInternalShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btConvexInternalShapeData" new_btConvexInternalShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btConvexInternalShapeData" delete_btConvexInternalShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalAabbCachingShape_setLocalScaling" btConvexInternalAabbCachingShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexInternalAabbCachingShape_getAabb" btConvexInternalAabbCachingShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexInternalAabbCachingShape_recalcLocalAabb" btConvexInternalAabbCachingShape_recalcLocalAabb) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btConvexInternalAabbCachingShape" delete_btConvexInternalAabbCachingShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btPolyhedralConvexShape" delete_btPolyhedralConvexShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_initializePolyhedralFeatures" btPolyhedralConvexShape_initializePolyhedralFeatures) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getConvexPolyhedron" btPolyhedralConvexShape_getConvexPolyhedron) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin" btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_calculateLocalInertia" btPolyhedralConvexShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getNumVertices" btPolyhedralConvexShape_getNumVertices) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getNumEdges" btPolyhedralConvexShape_getNumEdges) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getEdge" btPolyhedralConvexShape_getEdge) :void
  (self :pointer)
  (i :int)
  (pa :pointer)
  (pb :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getVertex" btPolyhedralConvexShape_getVertex) :void
  (self :pointer)
  (i :int)
  (vtx :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getNumPlanes" btPolyhedralConvexShape_getNumPlanes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getPlane" btPolyhedralConvexShape_getPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeSupport :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_isInside" btPolyhedralConvexShape_isInside) :pointer
  (self :pointer)
  (pt :pointer)
  (tolerance :float))

(cffi:defcfun ("_wrap_btPolyhedralConvexAabbCachingShape_getNonvirtualAabb" btPolyhedralConvexAabbCachingShape_getNonvirtualAabb) :void
  (self :pointer)
  (trans :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btPolyhedralConvexAabbCachingShape_setLocalScaling" btPolyhedralConvexAabbCachingShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexAabbCachingShape_getAabb" btPolyhedralConvexAabbCachingShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexAabbCachingShape_recalcLocalAabb" btPolyhedralConvexAabbCachingShape_recalcLocalAabb) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btPolyhedralConvexAabbCachingShape" delete_btPolyhedralConvexAabbCachingShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getHalfExtentsWithMargin" btBoxShape_getHalfExtentsWithMargin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getHalfExtentsWithoutMargin" btBoxShape_getHalfExtentsWithoutMargin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_localGetSupportingVertex" btBoxShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btBoxShape_localGetSupportingVertexWithoutMargin" btBoxShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_new_btBoxShape" new_btBoxShape) :pointer
  (boxHalfExtents :pointer))

(cffi:defcfun ("_wrap_btBoxShape_setMargin" btBoxShape_setMargin) :void
  (self :pointer)
  (collisionMargin :float))

(cffi:defcfun ("_wrap_btBoxShape_setLocalScaling" btBoxShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getAabb" btBoxShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBoxShape_calculateLocalInertia" btBoxShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getPlane" btBoxShape_getPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeSupport :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btBoxShape_getNumPlanes" btBoxShape_getNumPlanes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getNumVertices" btBoxShape_getNumVertices) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getNumEdges" btBoxShape_getNumEdges) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getVertex" btBoxShape_getVertex) :void
  (self :pointer)
  (i :int)
  (vtx :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getPlaneEquation" btBoxShape_getPlaneEquation) :void
  (self :pointer)
  (plane :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btBoxShape_getEdge" btBoxShape_getEdge) :void
  (self :pointer)
  (i :int)
  (pa :pointer)
  (pb :pointer))

(cffi:defcfun ("_wrap_btBoxShape_isInside" btBoxShape_isInside) :pointer
  (self :pointer)
  (pt :pointer)
  (tolerance :float))

(cffi:defcfun ("_wrap_btBoxShape_getName" btBoxShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getNumPreferredPenetrationDirections" btBoxShape_getNumPreferredPenetrationDirections) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getPreferredPenetrationDirection" btBoxShape_getPreferredPenetrationDirection) :void
  (self :pointer)
  (index :int)
  (penetrationVector :pointer))

(cffi:defcfun ("_wrap_delete_btBoxShape" delete_btBoxShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btSphereShape" new_btSphereShape) :pointer
  (radius :float))

(cffi:defcfun ("_wrap_btSphereShape_localGetSupportingVertex" btSphereShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btSphereShape_localGetSupportingVertexWithoutMargin" btSphereShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btSphereShape_calculateLocalInertia" btSphereShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btSphereShape_getAabb" btSphereShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btSphereShape_getRadius" btSphereShape_getRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSphereShape_setUnscaledRadius" btSphereShape_setUnscaledRadius) :void
  (self :pointer)
  (radius :float))

(cffi:defcfun ("_wrap_btSphereShape_getName" btSphereShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btSphereShape_setMargin" btSphereShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btSphereShape_getMargin" btSphereShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btSphereShape" delete_btSphereShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCapsuleShape__SWIG_1" new_btCapsuleShape) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_btCapsuleShape_calculateLocalInertia" btCapsuleShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_localGetSupportingVertexWithoutMargin" btCapsuleShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btCapsuleShape_setMargin" btCapsuleShape_setMargin) :void
  (self :pointer)
  (collisionMargin :float))

(cffi:defcfun ("_wrap_btCapsuleShape_getAabb" btCapsuleShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getName" btCapsuleShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getUpAxis" btCapsuleShape_getUpAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getRadius" btCapsuleShape_getRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getHalfHeight" btCapsuleShape_getHalfHeight) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_setLocalScaling" btCapsuleShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_calculateSerializeBufferSize" btCapsuleShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_serialize" btCapsuleShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btCapsuleShape" delete_btCapsuleShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCapsuleShapeX" new_btCapsuleShapeX) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_btCapsuleShapeX_getName" btCapsuleShapeX_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCapsuleShapeX" delete_btCapsuleShapeX) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCapsuleShapeZ" new_btCapsuleShapeZ) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_btCapsuleShapeZ_getName" btCapsuleShapeZ_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCapsuleShapeZ" delete_btCapsuleShapeZ) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCapsuleShapeData" new_btCapsuleShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btCapsuleShapeData" delete_btCapsuleShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_getHalfExtentsWithMargin" btCylinderShape_getHalfExtentsWithMargin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_getHalfExtentsWithoutMargin" btCylinderShape_getHalfExtentsWithoutMargin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCylinderShape" new_btCylinderShape) :pointer
  (halfExtents :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_getAabb" btCylinderShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_calculateLocalInertia" btCylinderShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_localGetSupportingVertexWithoutMargin" btCylinderShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btCylinderShape_setMargin" btCylinderShape_setMargin) :void
  (self :pointer)
  (collisionMargin :float))

(cffi:defcfun ("_wrap_btCylinderShape_localGetSupportingVertex" btCylinderShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_getUpAxis" btCylinderShape_getUpAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_getRadius" btCylinderShape_getRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_setLocalScaling" btCylinderShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_getName" btCylinderShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_calculateSerializeBufferSize" btCylinderShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCylinderShape_serialize" btCylinderShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btCylinderShape" delete_btCylinderShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCylinderShapeX" new_btCylinderShapeX) :pointer
  (halfExtents :pointer))

(cffi:defcfun ("_wrap_btCylinderShapeX_localGetSupportingVertexWithoutMargin" btCylinderShapeX_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin" btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btCylinderShapeX_getName" btCylinderShapeX_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btCylinderShapeX_getRadius" btCylinderShapeX_getRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCylinderShapeX" delete_btCylinderShapeX) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCylinderShapeZ" new_btCylinderShapeZ) :pointer
  (halfExtents :pointer))

(cffi:defcfun ("_wrap_btCylinderShapeZ_localGetSupportingVertexWithoutMargin" btCylinderShapeZ_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin" btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btCylinderShapeZ_getName" btCylinderShapeZ_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btCylinderShapeZ_getRadius" btCylinderShapeZ_getRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCylinderShapeZ" delete_btCylinderShapeZ) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCylinderShapeData" new_btCylinderShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btCylinderShapeData" delete_btCylinderShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConeShape" new_btConeShape) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_btConeShape_localGetSupportingVertex" btConeShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConeShape_localGetSupportingVertexWithoutMargin" btConeShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btConeShape_getRadius" btConeShape_getRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeShape_getHeight" btConeShape_getHeight) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeShape_calculateLocalInertia" btConeShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btConeShape_getName" btConeShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btConeShape_setConeUpIndex" btConeShape_setConeUpIndex) :void
  (self :pointer)
  (upIndex :int))

(cffi:defcfun ("_wrap_btConeShape_getConeUpIndex" btConeShape_getConeUpIndex) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConeShape_setLocalScaling" btConeShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_delete_btConeShape" delete_btConeShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConeShapeX" new_btConeShapeX) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_delete_btConeShapeX" delete_btConeShapeX) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConeShapeZ" new_btConeShapeZ) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_delete_btConeShapeZ" delete_btConeShapeZ) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btTriangleCallback" delete_btTriangleCallback) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleCallback_processTriangle" btTriangleCallback_processTriangle) :void
  (self :pointer)
  (triangle :pointer)
  (partId :int)
  (triangleIndex :int))

(cffi:defcfun ("_wrap_delete_btInternalTriangleIndexCallback" delete_btInternalTriangleIndexCallback) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btInternalTriangleIndexCallback_internalProcessTriangleIndex" btInternalTriangleIndexCallback_internalProcessTriangleIndex) :void
  (self :pointer)
  (triangle :pointer)
  (partId :int)
  (triangleIndex :int))

(cffi:defcenum PHY_ScalarType
	:PHY_FLOAT
	:PHY_DOUBLE
	:PHY_INTEGER
	:PHY_SHORT
	:PHY_FIXEDPOINT88
	:PHY_UCHAR)

(cffi:defcfun ("_wrap_delete_btConcaveShape" delete_btConcaveShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConcaveShape_processAllTriangles" btConcaveShape_processAllTriangles) :void
  (self :pointer)
  (callback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConcaveShape_getMargin" btConcaveShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConcaveShape_setMargin" btConcaveShape_setMargin) :void
  (self :pointer)
  (collisionMargin :float))

(cffi:defcfun ("_wrap_new_btStaticPlaneShape" new_btStaticPlaneShape) :pointer
  (planeNormal :pointer)
  (planeConstant :float))

(cffi:defcfun ("_wrap_delete_btStaticPlaneShape" delete_btStaticPlaneShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getAabb" btStaticPlaneShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_processAllTriangles" btStaticPlaneShape_processAllTriangles) :void
  (self :pointer)
  (callback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_calculateLocalInertia" btStaticPlaneShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_setLocalScaling" btStaticPlaneShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getLocalScaling" btStaticPlaneShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getPlaneNormal" btStaticPlaneShape_getPlaneNormal) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getPlaneConstant" btStaticPlaneShape_getPlaneConstant) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getName" btStaticPlaneShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_calculateSerializeBufferSize" btStaticPlaneShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_serialize" btStaticPlaneShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btStaticPlaneShapeData" new_btStaticPlaneShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btStaticPlaneShapeData" delete_btStaticPlaneShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConvexHullShape__SWIG_0" new_btConvexHullShape) :pointer
  (points :pointer)
  (numPoints :int)
  (stride :int))

(cffi:defcfun ("_wrap_new_btConvexHullShape__SWIG_1" new_btConvexHullShape) :pointer
  (points :pointer)
  (numPoints :int))

(cffi:defcfun ("_wrap_new_btConvexHullShape__SWIG_2" new_btConvexHullShape) :pointer
  (points :pointer))

(cffi:defcfun ("_wrap_new_btConvexHullShape__SWIG_3" new_btConvexHullShape) :pointer)

(cffi:defcfun ("_wrap_btConvexHullShape_addPoint" btConvexHullShape_addPoint) :void
  (self :pointer)
  (point :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getUnscaledPoints__SWIG_0" btConvexHullShape_getUnscaledPoints) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getUnscaledPoints__SWIG_1" btConvexHullShape_getUnscaledPoints) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getPoints" btConvexHullShape_getPoints) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getScaledPoint" btConvexHullShape_getScaledPoint) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btConvexHullShape_getNumPoints" btConvexHullShape_getNumPoints) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_localGetSupportingVertex" btConvexHullShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_localGetSupportingVertexWithoutMargin" btConvexHullShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btConvexHullShape_project" btConvexHullShape_project) :void
  (self :pointer)
  (trans :pointer)
  (dir :pointer)
  (min :pointer)
  (max :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getName" btConvexHullShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getNumVertices" btConvexHullShape_getNumVertices) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getNumEdges" btConvexHullShape_getNumEdges) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getEdge" btConvexHullShape_getEdge) :void
  (self :pointer)
  (i :int)
  (pa :pointer)
  (pb :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getVertex" btConvexHullShape_getVertex) :void
  (self :pointer)
  (i :int)
  (vtx :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getNumPlanes" btConvexHullShape_getNumPlanes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getPlane" btConvexHullShape_getPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeSupport :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btConvexHullShape_isInside" btConvexHullShape_isInside) :pointer
  (self :pointer)
  (pt :pointer)
  (tolerance :float))

(cffi:defcfun ("_wrap_btConvexHullShape_setLocalScaling" btConvexHullShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_calculateSerializeBufferSize" btConvexHullShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_serialize" btConvexHullShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btConvexHullShape" delete_btConvexHullShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConvexHullShapeData" new_btConvexHullShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btConvexHullShapeData" delete_btConvexHullShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btStridingMeshInterface" delete_btStridingMeshInterface) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_InternalProcessAllTriangles" btStridingMeshInterface_InternalProcessAllTriangles) :void
  (self :pointer)
  (callback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_calculateAabbBruteForce" btStridingMeshInterface_calculateAabbBruteForce) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_getLockedVertexIndexBase__SWIG_0" btStridingMeshInterface_getLockedVertexIndexBase) :void
  (self :pointer)
  (vertexbase :pointer)
  (numverts :pointer)
  (type :pointer)
  (stride :pointer)
  (indexbase :pointer)
  (indexstride :pointer)
  (numfaces :pointer)
  (indicestype :pointer)
  (subpart :int))

(cffi:defcfun ("_wrap_btStridingMeshInterface_getLockedVertexIndexBase__SWIG_1" btStridingMeshInterface_getLockedVertexIndexBase) :void
  (self :pointer)
  (vertexbase :pointer)
  (numverts :pointer)
  (type :pointer)
  (stride :pointer)
  (indexbase :pointer)
  (indexstride :pointer)
  (numfaces :pointer)
  (indicestype :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase__SWIG_0" btStridingMeshInterface_getLockedReadOnlyVertexIndexBase) :void
  (self :pointer)
  (vertexbase :pointer)
  (numverts :pointer)
  (type :pointer)
  (stride :pointer)
  (indexbase :pointer)
  (indexstride :pointer)
  (numfaces :pointer)
  (indicestype :pointer)
  (subpart :int))

(cffi:defcfun ("_wrap_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase__SWIG_1" btStridingMeshInterface_getLockedReadOnlyVertexIndexBase) :void
  (self :pointer)
  (vertexbase :pointer)
  (numverts :pointer)
  (type :pointer)
  (stride :pointer)
  (indexbase :pointer)
  (indexstride :pointer)
  (numfaces :pointer)
  (indicestype :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_unLockVertexBase" btStridingMeshInterface_unLockVertexBase) :void
  (self :pointer)
  (subpart :int))

(cffi:defcfun ("_wrap_btStridingMeshInterface_unLockReadOnlyVertexBase" btStridingMeshInterface_unLockReadOnlyVertexBase) :void
  (self :pointer)
  (subpart :int))

(cffi:defcfun ("_wrap_btStridingMeshInterface_getNumSubParts" btStridingMeshInterface_getNumSubParts) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_preallocateVertices" btStridingMeshInterface_preallocateVertices) :void
  (self :pointer)
  (numverts :int))

(cffi:defcfun ("_wrap_btStridingMeshInterface_preallocateIndices" btStridingMeshInterface_preallocateIndices) :void
  (self :pointer)
  (numindices :int))

(cffi:defcfun ("_wrap_btStridingMeshInterface_hasPremadeAabb" btStridingMeshInterface_hasPremadeAabb) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_setPremadeAabb" btStridingMeshInterface_setPremadeAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_getPremadeAabb" btStridingMeshInterface_getPremadeAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_getScaling" btStridingMeshInterface_getScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_setScaling" btStridingMeshInterface_setScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_calculateSerializeBufferSize" btStridingMeshInterface_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btStridingMeshInterface_serialize" btStridingMeshInterface_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btIntIndexData" new_btIntIndexData) :pointer)

(cffi:defcfun ("_wrap_delete_btIntIndexData" delete_btIntIndexData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btShortIntIndexData" new_btShortIntIndexData) :pointer)

(cffi:defcfun ("_wrap_delete_btShortIntIndexData" delete_btShortIntIndexData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btShortIntIndexTripletData" new_btShortIntIndexTripletData) :pointer)

(cffi:defcfun ("_wrap_delete_btShortIntIndexTripletData" delete_btShortIntIndexTripletData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCharIndexTripletData" new_btCharIndexTripletData) :pointer)

(cffi:defcfun ("_wrap_delete_btCharIndexTripletData" delete_btCharIndexTripletData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btMeshPartData" new_btMeshPartData) :pointer)

(cffi:defcfun ("_wrap_delete_btMeshPartData" delete_btMeshPartData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btStridingMeshInterfaceData" new_btStridingMeshInterfaceData) :pointer)

(cffi:defcfun ("_wrap_delete_btStridingMeshInterfaceData" delete_btStridingMeshInterfaceData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btIndexedMesh" delete_btIndexedMesh) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btTriangleIndexVertexArray__SWIG_0" new_btTriangleIndexVertexArray) :pointer)

(cffi:defcfun ("_wrap_delete_btTriangleIndexVertexArray" delete_btTriangleIndexVertexArray) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btTriangleIndexVertexArray__SWIG_1" new_btTriangleIndexVertexArray) :pointer
  (numTriangles :int)
  (triangleIndexBase :pointer)
  (triangleIndexStride :int)
  (numVertices :int)
  (vertexBase :pointer)
  (vertexStride :int))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_addIndexedMesh__SWIG_0" btTriangleIndexVertexArray_addIndexedMesh) :void
  (self :pointer)
  (mesh :pointer)
  (indexType PHY_ScalarType))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_addIndexedMesh__SWIG_1" btTriangleIndexVertexArray_addIndexedMesh) :void
  (self :pointer)
  (mesh :pointer))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0" btTriangleIndexVertexArray_getLockedVertexIndexBase) :void
  (self :pointer)
  (vertexbase :pointer)
  (numverts :pointer)
  (type :pointer)
  (vertexStride :pointer)
  (indexbase :pointer)
  (indexstride :pointer)
  (numfaces :pointer)
  (indicestype :pointer)
  (subpart :int))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1" btTriangleIndexVertexArray_getLockedVertexIndexBase) :void
  (self :pointer)
  (vertexbase :pointer)
  (numverts :pointer)
  (type :pointer)
  (vertexStride :pointer)
  (indexbase :pointer)
  (indexstride :pointer)
  (numfaces :pointer)
  (indicestype :pointer))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0" btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase) :void
  (self :pointer)
  (vertexbase :pointer)
  (numverts :pointer)
  (type :pointer)
  (vertexStride :pointer)
  (indexbase :pointer)
  (indexstride :pointer)
  (numfaces :pointer)
  (indicestype :pointer)
  (subpart :int))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1" btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase) :void
  (self :pointer)
  (vertexbase :pointer)
  (numverts :pointer)
  (type :pointer)
  (vertexStride :pointer)
  (indexbase :pointer)
  (indexstride :pointer)
  (numfaces :pointer)
  (indicestype :pointer))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_unLockVertexBase" btTriangleIndexVertexArray_unLockVertexBase) :void
  (self :pointer)
  (subpart :int))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_unLockReadOnlyVertexBase" btTriangleIndexVertexArray_unLockReadOnlyVertexBase) :void
  (self :pointer)
  (subpart :int))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_getNumSubParts" btTriangleIndexVertexArray_getNumSubParts) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0" btTriangleIndexVertexArray_getIndexedMeshArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_1" btTriangleIndexVertexArray_getIndexedMeshArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_preallocateVertices" btTriangleIndexVertexArray_preallocateVertices) :void
  (self :pointer)
  (numverts :int))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_preallocateIndices" btTriangleIndexVertexArray_preallocateIndices) :void
  (self :pointer)
  (numindices :int))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_hasPremadeAabb" btTriangleIndexVertexArray_hasPremadeAabb) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_setPremadeAabb" btTriangleIndexVertexArray_setPremadeAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btTriangleIndexVertexArray_getPremadeAabb" btTriangleIndexVertexArray_getPremadeAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btTriangleMesh_m_weldingThreshold_set" btTriangleMesh_m_weldingThreshold_set) :void
  (self :pointer)
  (m_weldingThreshold :float))

(cffi:defcfun ("_wrap_btTriangleMesh_m_weldingThreshold_get" btTriangleMesh_m_weldingThreshold_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_new_btTriangleMesh__SWIG_0" new_btTriangleMesh) :pointer
  (use32bitIndices :pointer)
  (use4componentVertices :pointer))

(cffi:defcfun ("_wrap_new_btTriangleMesh__SWIG_1" new_btTriangleMesh) :pointer
  (use32bitIndices :pointer))

(cffi:defcfun ("_wrap_new_btTriangleMesh__SWIG_2" new_btTriangleMesh) :pointer)

(cffi:defcfun ("_wrap_btTriangleMesh_getUse32bitIndices" btTriangleMesh_getUse32bitIndices) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMesh_getUse4componentVertices" btTriangleMesh_getUse4componentVertices) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMesh_addTriangle__SWIG_0" btTriangleMesh_addTriangle) :void
  (self :pointer)
  (vertex0 :pointer)
  (vertex1 :pointer)
  (vertex2 :pointer)
  (removeDuplicateVertices :pointer))

(cffi:defcfun ("_wrap_btTriangleMesh_addTriangle__SWIG_1" btTriangleMesh_addTriangle) :void
  (self :pointer)
  (vertex0 :pointer)
  (vertex1 :pointer)
  (vertex2 :pointer))

(cffi:defcfun ("_wrap_btTriangleMesh_getNumTriangles" btTriangleMesh_getNumTriangles) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMesh_preallocateVertices" btTriangleMesh_preallocateVertices) :void
  (self :pointer)
  (numverts :int))

(cffi:defcfun ("_wrap_btTriangleMesh_preallocateIndices" btTriangleMesh_preallocateIndices) :void
  (self :pointer)
  (numindices :int))

(cffi:defcfun ("_wrap_btTriangleMesh_findOrAddVertex" btTriangleMesh_findOrAddVertex) :int
  (self :pointer)
  (vertex :pointer)
  (removeDuplicateVertices :pointer))

(cffi:defcfun ("_wrap_btTriangleMesh_addIndex" btTriangleMesh_addIndex) :void
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_delete_btTriangleMesh" delete_btTriangleMesh) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConvexTriangleMeshShape__SWIG_0" new_btConvexTriangleMeshShape) :pointer
  (meshInterface :pointer)
  (calcAabb :pointer))

(cffi:defcfun ("_wrap_new_btConvexTriangleMeshShape__SWIG_1" new_btConvexTriangleMeshShape) :pointer
  (meshInterface :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getMeshInterface__SWIG_0" btConvexTriangleMeshShape_getMeshInterface) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getMeshInterface__SWIG_1" btConvexTriangleMeshShape_getMeshInterface) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_localGetSupportingVertex" btConvexTriangleMeshShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin" btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getName" btConvexTriangleMeshShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getNumVertices" btConvexTriangleMeshShape_getNumVertices) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getNumEdges" btConvexTriangleMeshShape_getNumEdges) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getEdge" btConvexTriangleMeshShape_getEdge) :void
  (self :pointer)
  (i :int)
  (pa :pointer)
  (pb :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getVertex" btConvexTriangleMeshShape_getVertex) :void
  (self :pointer)
  (i :int)
  (vtx :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getNumPlanes" btConvexTriangleMeshShape_getNumPlanes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getPlane" btConvexTriangleMeshShape_getPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeSupport :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_isInside" btConvexTriangleMeshShape_isInside) :pointer
  (self :pointer)
  (pt :pointer)
  (tolerance :float))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_setLocalScaling" btConvexTriangleMeshShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_getLocalScaling" btConvexTriangleMeshShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexTriangleMeshShape_calculatePrincipalAxisTransform" btConvexTriangleMeshShape_calculatePrincipalAxisTransform) :void
  (self :pointer)
  (principal :pointer)
  (inertia :pointer)
  (volume :pointer))

(cffi:defcfun ("_wrap_delete_btConvexTriangleMeshShape" delete_btConvexTriangleMeshShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btTriangleMeshShape" delete_btTriangleMeshShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_localGetSupportingVertex" btTriangleMeshShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_localGetSupportingVertexWithoutMargin" btTriangleMeshShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_recalcLocalAabb" btTriangleMeshShape_recalcLocalAabb) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_getAabb" btTriangleMeshShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_processAllTriangles" btTriangleMeshShape_processAllTriangles) :void
  (self :pointer)
  (callback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_calculateLocalInertia" btTriangleMeshShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_setLocalScaling" btTriangleMeshShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_getLocalScaling" btTriangleMeshShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_getMeshInterface__SWIG_0" btTriangleMeshShape_getMeshInterface) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_getMeshInterface__SWIG_1" btTriangleMeshShape_getMeshInterface) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_getLocalAabbMin" btTriangleMeshShape_getLocalAabbMin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_getLocalAabbMax" btTriangleMeshShape_getLocalAabbMax) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTriangleMeshShape_getName" btTriangleMeshShape_getName) :string
  (self :pointer))

(cl:defconstant btQuantizedBvhDataName "btQuantizedBvhFloatData")

(cl:defconstant MAX_SUBTREE_SIZE_IN_BYTES 2048)

(cl:defconstant MAX_NUM_PARTS_IN_BITS 10)

(cffi:defcfun ("_wrap_delete_btQuantizedBvhNode" delete_btQuantizedBvhNode) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btOptimizedBvhNode" delete_btOptimizedBvhNode) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_quantizedAabbMin_set" btBvhSubtreeInfo_m_quantizedAabbMin_set) :void
  (self :pointer)
  (m_quantizedAabbMin :pointer))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_quantizedAabbMin_get" btBvhSubtreeInfo_m_quantizedAabbMin_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_quantizedAabbMax_set" btBvhSubtreeInfo_m_quantizedAabbMax_set) :void
  (self :pointer)
  (m_quantizedAabbMax :pointer))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_quantizedAabbMax_get" btBvhSubtreeInfo_m_quantizedAabbMax_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_rootNodeIndex_set" btBvhSubtreeInfo_m_rootNodeIndex_set) :void
  (self :pointer)
  (m_rootNodeIndex :int))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_rootNodeIndex_get" btBvhSubtreeInfo_m_rootNodeIndex_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_subtreeSize_set" btBvhSubtreeInfo_m_subtreeSize_set) :void
  (self :pointer)
  (m_subtreeSize :int))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_subtreeSize_get" btBvhSubtreeInfo_m_subtreeSize_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_padding_set" btBvhSubtreeInfo_m_padding_set) :void
  (self :pointer)
  (m_padding :pointer))

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_m_padding_get" btBvhSubtreeInfo_m_padding_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btBvhSubtreeInfo" new_btBvhSubtreeInfo) :pointer)

(cffi:defcfun ("_wrap_btBvhSubtreeInfo_setAabbFromQuantizeNode" btBvhSubtreeInfo_setAabbFromQuantizeNode) :void
  (self :pointer)
  (quantizedNode :pointer))

(cffi:defcfun ("_wrap_delete_btBvhSubtreeInfo" delete_btBvhSubtreeInfo) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btNodeOverlapCallback" delete_btNodeOverlapCallback) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btNodeOverlapCallback_processNode" btNodeOverlapCallback_processNode) :void
  (self :pointer)
  (subPart :int)
  (triangleIndex :int))

(cffi:defcenum btTraversalMode
	(:TRAVERSAL_STACKLESS #.0)
	:TRAVERSAL_STACKLESS_CACHE_FRIENDLY
	:TRAVERSAL_RECURSIVE)

(cffi:defcfun ("_wrap_new_btQuantizedBvh" new_btQuantizedBvh) :pointer)

(cffi:defcfun ("_wrap_delete_btQuantizedBvh" delete_btQuantizedBvh) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_setQuantizationValues__SWIG_0" btQuantizedBvh_setQuantizationValues) :void
  (self :pointer)
  (bvhAabbMin :pointer)
  (bvhAabbMax :pointer)
  (quantizationMargin :float))

(cffi:defcfun ("_wrap_btQuantizedBvh_setQuantizationValues__SWIG_1" btQuantizedBvh_setQuantizationValues) :void
  (self :pointer)
  (bvhAabbMin :pointer)
  (bvhAabbMax :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_getLeafNodeArray" btQuantizedBvh_getLeafNodeArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_buildInternal" btQuantizedBvh_buildInternal) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_reportAabbOverlappingNodex" btQuantizedBvh_reportAabbOverlappingNodex) :void
  (self :pointer)
  (nodeCallback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_reportRayOverlappingNodex" btQuantizedBvh_reportRayOverlappingNodex) :void
  (self :pointer)
  (nodeCallback :pointer)
  (raySource :pointer)
  (rayTarget :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_reportBoxCastOverlappingNodex" btQuantizedBvh_reportBoxCastOverlappingNodex) :void
  (self :pointer)
  (nodeCallback :pointer)
  (raySource :pointer)
  (rayTarget :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_quantize" btQuantizedBvh_quantize) :void
  (self :pointer)
  (out :pointer)
  (point :pointer)
  (isMax :int))

(cffi:defcfun ("_wrap_btQuantizedBvh_quantizeWithClamp" btQuantizedBvh_quantizeWithClamp) :void
  (self :pointer)
  (out :pointer)
  (point2 :pointer)
  (isMax :int))

(cffi:defcfun ("_wrap_btQuantizedBvh_unQuantize" btQuantizedBvh_unQuantize) :pointer
  (self :pointer)
  (vecIn :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_setTraversalMode" btQuantizedBvh_setTraversalMode) :void
  (self :pointer)
  (traversalMode :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_getQuantizedNodeArray" btQuantizedBvh_getQuantizedNodeArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_getSubtreeInfoArray" btQuantizedBvh_getSubtreeInfoArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_calculateSerializeBufferSize" btQuantizedBvh_calculateSerializeBufferSize) :unsigned-int
  (self :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_serialize__SWIG_0" btQuantizedBvh_serialize) :pointer
  (self :pointer)
  (o_alignedDataBuffer :pointer)
  (i_dataBufferSize :unsigned-int)
  (i_swapEndian :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_deSerializeInPlace" btQuantizedBvh_deSerializeInPlace) :pointer
  (i_alignedDataBuffer :pointer)
  (i_dataBufferSize :unsigned-int)
  (i_swapEndian :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_getAlignmentSerializationPadding" btQuantizedBvh_getAlignmentSerializationPadding) :unsigned-int)

(cffi:defcfun ("_wrap_btQuantizedBvh_calculateSerializeBufferSizeNew" btQuantizedBvh_calculateSerializeBufferSizeNew) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_serialize__SWIG_1" btQuantizedBvh_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_deSerializeFloat" btQuantizedBvh_deSerializeFloat) :void
  (self :pointer)
  (quantizedBvhFloatData :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_deSerializeDouble" btQuantizedBvh_deSerializeDouble) :void
  (self :pointer)
  (quantizedBvhDoubleData :pointer))

(cffi:defcfun ("_wrap_btQuantizedBvh_isQuantized" btQuantizedBvh_isQuantized) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btBvhSubtreeInfoData" new_btBvhSubtreeInfoData) :pointer)

(cffi:defcfun ("_wrap_delete_btBvhSubtreeInfoData" delete_btBvhSubtreeInfoData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btOptimizedBvhNodeFloatData" new_btOptimizedBvhNodeFloatData) :pointer)

(cffi:defcfun ("_wrap_delete_btOptimizedBvhNodeFloatData" delete_btOptimizedBvhNodeFloatData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btOptimizedBvhNodeDoubleData" new_btOptimizedBvhNodeDoubleData) :pointer)

(cffi:defcfun ("_wrap_delete_btOptimizedBvhNodeDoubleData" delete_btOptimizedBvhNodeDoubleData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btQuantizedBvhNodeData" new_btQuantizedBvhNodeData) :pointer)

(cffi:defcfun ("_wrap_delete_btQuantizedBvhNodeData" delete_btQuantizedBvhNodeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btQuantizedBvhFloatData" new_btQuantizedBvhFloatData) :pointer)

(cffi:defcfun ("_wrap_delete_btQuantizedBvhFloatData" delete_btQuantizedBvhFloatData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btQuantizedBvhDoubleData" new_btQuantizedBvhDoubleData) :pointer)

(cffi:defcfun ("_wrap_delete_btQuantizedBvhDoubleData" delete_btQuantizedBvhDoubleData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btOptimizedBvh" new_btOptimizedBvh) :pointer)

(cffi:defcfun ("_wrap_delete_btOptimizedBvh" delete_btOptimizedBvh) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btOptimizedBvh_build" btOptimizedBvh_build) :void
  (self :pointer)
  (triangles :pointer)
  (useQuantizedAabbCompression :pointer)
  (bvhAabbMin :pointer)
  (bvhAabbMax :pointer))

(cffi:defcfun ("_wrap_btOptimizedBvh_refit" btOptimizedBvh_refit) :void
  (self :pointer)
  (triangles :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btOptimizedBvh_refitPartial" btOptimizedBvh_refitPartial) :void
  (self :pointer)
  (triangles :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btOptimizedBvh_updateBvhNodes" btOptimizedBvh_updateBvhNodes) :void
  (self :pointer)
  (meshInterface :pointer)
  (firstNode :int)
  (endNode :int)
  (index :int))

(cffi:defcfun ("_wrap_btOptimizedBvh_serializeInPlace" btOptimizedBvh_serializeInPlace) :pointer
  (self :pointer)
  (o_alignedDataBuffer :pointer)
  (i_dataBufferSize :unsigned-int)
  (i_swapEndian :pointer))

(cffi:defcfun ("_wrap_btOptimizedBvh_deSerializeInPlace" btOptimizedBvh_deSerializeInPlace) :pointer
  (i_alignedDataBuffer :pointer)
  (i_dataBufferSize :unsigned-int)
  (i_swapEndian :pointer))

(cffi:defcstruct btHashString
	(m_string :string)
	(m_hash :unsigned-int)
	(getHash :pointer)
	(portableStringCompare :pointer)
	(equals :pointer))

(cffi:defcvar ("BT_HASH_NULL" BT_HASH_NULL)
 :int)

(cffi:defcfun ("_wrap_new_btHashInt" new_btHashInt) :pointer
  (uid :int))

(cffi:defcfun ("_wrap_btHashInt_getUid1" btHashInt_getUid1) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btHashInt_setUid1" btHashInt_setUid1) :void
  (self :pointer)
  (uid :int))

(cffi:defcfun ("_wrap_btHashInt_equals" btHashInt_equals) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btHashInt_getHash" btHashInt_getHash) :unsigned-int
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btHashInt" delete_btHashInt) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btHashPtr" new_btHashPtr) :pointer
  (ptr :pointer))

(cffi:defcfun ("_wrap_btHashPtr_getPointer" btHashPtr_getPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHashPtr_equals" btHashPtr_equals) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btHashPtr_getHash" btHashPtr_getHash) :unsigned-int
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btHashPtr" delete_btHashPtr) :void
  (self :pointer))

(cffi:defcstruct btBlock
	(previous :pointer)
	(address :pointer))

(cffi:defcfun ("_wrap_new_btStackAlloc" new_btStackAlloc) :pointer
  (size :unsigned-int))

(cffi:defcfun ("_wrap_delete_btStackAlloc" delete_btStackAlloc) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btStackAlloc_create" btStackAlloc_create) :void
  (self :pointer)
  (size :unsigned-int))

(cffi:defcfun ("_wrap_btStackAlloc_destroy" btStackAlloc_destroy) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btStackAlloc_getAvailableMemory" btStackAlloc_getAvailableMemory) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btStackAlloc_allocate" btStackAlloc_allocate) :pointer
  (self :pointer)
  (size :unsigned-int))

(cffi:defcfun ("_wrap_btStackAlloc_beginBlock" btStackAlloc_beginBlock) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStackAlloc_endBlock" btStackAlloc_endBlock) :void
  (self :pointer)
  (block :pointer))

(cffi:defcvar ("sBulletDNAstr" sBulletDNAstr)
 :pointer)

(cffi:defcvar ("sBulletDNAlen" sBulletDNAlen)
 :int)

(cffi:defcvar ("sBulletDNAstr64" sBulletDNAstr64)
 :pointer)

(cffi:defcvar ("sBulletDNAlen64" sBulletDNAlen64)
 :int)

(cffi:defcfun ("_wrap_btStrLen" btStrLen) :int
  (str :string))

(cffi:defcfun ("_wrap_btChunk_m_chunkCode_set" btChunk_m_chunkCode_set) :void
  (self :pointer)
  (m_chunkCode :int))

(cffi:defcfun ("_wrap_btChunk_m_chunkCode_get" btChunk_m_chunkCode_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btChunk_m_length_set" btChunk_m_length_set) :void
  (self :pointer)
  (m_length :int))

(cffi:defcfun ("_wrap_btChunk_m_length_get" btChunk_m_length_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btChunk_m_oldPtr_set" btChunk_m_oldPtr_set) :void
  (self :pointer)
  (m_oldPtr :pointer))

(cffi:defcfun ("_wrap_btChunk_m_oldPtr_get" btChunk_m_oldPtr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btChunk_m_dna_nr_set" btChunk_m_dna_nr_set) :void
  (self :pointer)
  (m_dna_nr :int))

(cffi:defcfun ("_wrap_btChunk_m_dna_nr_get" btChunk_m_dna_nr_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btChunk_m_number_set" btChunk_m_number_set) :void
  (self :pointer)
  (m_number :int))

(cffi:defcfun ("_wrap_btChunk_m_number_get" btChunk_m_number_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_new_btChunk" new_btChunk) :pointer)

(cffi:defcfun ("_wrap_delete_btChunk" delete_btChunk) :void
  (self :pointer))

(cffi:defcenum btSerializationFlags
	(:BT_SERIALIZE_NO_BVH #.1)
	(:BT_SERIALIZE_NO_TRIANGLEINFOMAP #.2)
	(:BT_SERIALIZE_NO_DUPLICATE_ASSERT #.4))

(cffi:defcfun ("_wrap_delete_btSerializer" delete_btSerializer) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSerializer_getBufferPointer" btSerializer_getBufferPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSerializer_getCurrentBufferSize" btSerializer_getCurrentBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSerializer_allocate" btSerializer_allocate) :pointer
  (self :pointer)
  (size :pointer)
  (numElements :int))

(cffi:defcfun ("_wrap_btSerializer_finalizeChunk" btSerializer_finalizeChunk) :void
  (self :pointer)
  (chunk :pointer)
  (structType :string)
  (chunkCode :int)
  (oldPtr :pointer))

(cffi:defcfun ("_wrap_btSerializer_findPointer" btSerializer_findPointer) :pointer
  (self :pointer)
  (oldPtr :pointer))

(cffi:defcfun ("_wrap_btSerializer_getUniquePointer" btSerializer_getUniquePointer) :pointer
  (self :pointer)
  (oldPtr :pointer))

(cffi:defcfun ("_wrap_btSerializer_startSerialization" btSerializer_startSerialization) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSerializer_finishSerialization" btSerializer_finishSerialization) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSerializer_findNameForPointer" btSerializer_findNameForPointer) :string
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_btSerializer_registerNameForPointer" btSerializer_registerNameForPointer) :void
  (self :pointer)
  (ptr :pointer)
  (name :string))

(cffi:defcfun ("_wrap_btSerializer_serializeName" btSerializer_serializeName) :void
  (self :pointer)
  (ptr :string))

(cffi:defcfun ("_wrap_btSerializer_getSerializationFlags" btSerializer_getSerializationFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSerializer_setSerializationFlags" btSerializer_setSerializationFlags) :void
  (self :pointer)
  (flags :int))

(cl:defconstant BT_HEADER_LENGTH 12)

(cffi:defcstruct btPointerUid)

(cffi:defcfun ("_wrap_new_btDefaultSerializer__SWIG_0" new_btDefaultSerializer) :pointer
  (totalSize :int))

(cffi:defcfun ("_wrap_new_btDefaultSerializer__SWIG_1" new_btDefaultSerializer) :pointer)

(cffi:defcfun ("_wrap_delete_btDefaultSerializer" delete_btDefaultSerializer) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_writeHeader" btDefaultSerializer_writeHeader) :void
  (self :pointer)
  (buffer :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_startSerialization" btDefaultSerializer_startSerialization) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_finishSerialization" btDefaultSerializer_finishSerialization) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_getUniquePointer" btDefaultSerializer_getUniquePointer) :pointer
  (self :pointer)
  (oldPtr :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_getBufferPointer" btDefaultSerializer_getBufferPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_getCurrentBufferSize" btDefaultSerializer_getCurrentBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_finalizeChunk" btDefaultSerializer_finalizeChunk) :void
  (self :pointer)
  (chunk :pointer)
  (structType :string)
  (chunkCode :int)
  (oldPtr :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_internalAlloc" btDefaultSerializer_internalAlloc) :pointer
  (self :pointer)
  (size :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_allocate" btDefaultSerializer_allocate) :pointer
  (self :pointer)
  (size :pointer)
  (numElements :int))

(cffi:defcfun ("_wrap_btDefaultSerializer_findNameForPointer" btDefaultSerializer_findNameForPointer) :string
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_registerNameForPointer" btDefaultSerializer_registerNameForPointer) :void
  (self :pointer)
  (ptr :pointer)
  (name :string))

(cffi:defcfun ("_wrap_btDefaultSerializer_serializeName" btDefaultSerializer_serializeName) :void
  (self :pointer)
  (name :string))

(cffi:defcfun ("_wrap_btDefaultSerializer_getSerializationFlags" btDefaultSerializer_getSerializationFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultSerializer_setSerializationFlags" btDefaultSerializer_setSerializationFlags) :void
  (self :pointer)
  (flags :int))

(cl:defconstant TRI_INFO_V0V1_CONVEX 1)

(cl:defconstant TRI_INFO_V1V2_CONVEX 2)

(cl:defconstant TRI_INFO_V2V0_CONVEX 4)

(cl:defconstant TRI_INFO_V0V1_SWAP_NORMALB 8)

(cl:defconstant TRI_INFO_V1V2_SWAP_NORMALB 16)

(cl:defconstant TRI_INFO_V2V0_SWAP_NORMALB 32)

(cffi:defcfun ("_wrap_delete_btTriangleInfo" delete_btTriangleInfo) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btTriangleInfoData" new_btTriangleInfoData) :pointer)

(cffi:defcfun ("_wrap_delete_btTriangleInfoData" delete_btTriangleInfoData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btTriangleInfoMapData" new_btTriangleInfoMapData) :pointer)

(cffi:defcfun ("_wrap_delete_btTriangleInfoMapData" delete_btTriangleInfoMapData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btBvhTriangleMeshShape__SWIG_0" new_btBvhTriangleMeshShape) :pointer
  (meshInterface :pointer)
  (useQuantizedAabbCompression :pointer)
  (buildBvh :pointer))

(cffi:defcfun ("_wrap_new_btBvhTriangleMeshShape__SWIG_1" new_btBvhTriangleMeshShape) :pointer
  (meshInterface :pointer)
  (useQuantizedAabbCompression :pointer))

(cffi:defcfun ("_wrap_new_btBvhTriangleMeshShape__SWIG_2" new_btBvhTriangleMeshShape) :pointer
  (meshInterface :pointer)
  (useQuantizedAabbCompression :pointer)
  (bvhAabbMin :pointer)
  (bvhAabbMax :pointer)
  (buildBvh :pointer))

(cffi:defcfun ("_wrap_new_btBvhTriangleMeshShape__SWIG_3" new_btBvhTriangleMeshShape) :pointer
  (meshInterface :pointer)
  (useQuantizedAabbCompression :pointer)
  (bvhAabbMin :pointer)
  (bvhAabbMax :pointer))

(cffi:defcfun ("_wrap_delete_btBvhTriangleMeshShape" delete_btBvhTriangleMeshShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_getOwnsBvh" btBvhTriangleMeshShape_getOwnsBvh) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_performRaycast" btBvhTriangleMeshShape_performRaycast) :void
  (self :pointer)
  (callback :pointer)
  (raySource :pointer)
  (rayTarget :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_performConvexcast" btBvhTriangleMeshShape_performConvexcast) :void
  (self :pointer)
  (callback :pointer)
  (boxSource :pointer)
  (boxTarget :pointer)
  (boxMin :pointer)
  (boxMax :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_processAllTriangles" btBvhTriangleMeshShape_processAllTriangles) :void
  (self :pointer)
  (callback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_refitTree" btBvhTriangleMeshShape_refitTree) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_partialRefitTree" btBvhTriangleMeshShape_partialRefitTree) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_getName" btBvhTriangleMeshShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_setLocalScaling" btBvhTriangleMeshShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_getOptimizedBvh" btBvhTriangleMeshShape_getOptimizedBvh) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0" btBvhTriangleMeshShape_setOptimizedBvh) :void
  (self :pointer)
  (bvh :pointer)
  (localScaling :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1" btBvhTriangleMeshShape_setOptimizedBvh) :void
  (self :pointer)
  (bvh :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_buildOptimizedBvh" btBvhTriangleMeshShape_buildOptimizedBvh) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_usesQuantizedAabbCompression" btBvhTriangleMeshShape_usesQuantizedAabbCompression) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_setTriangleInfoMap" btBvhTriangleMeshShape_setTriangleInfoMap) :void
  (self :pointer)
  (triangleInfoMap :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0" btBvhTriangleMeshShape_getTriangleInfoMap) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_1" btBvhTriangleMeshShape_getTriangleInfoMap) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_calculateSerializeBufferSize" btBvhTriangleMeshShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_serialize" btBvhTriangleMeshShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_serializeSingleBvh" btBvhTriangleMeshShape_serializeSingleBvh) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btBvhTriangleMeshShape_serializeSingleTriangleInfoMap" btBvhTriangleMeshShape_serializeSingleTriangleInfoMap) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btTriangleMeshShapeData" new_btTriangleMeshShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btTriangleMeshShapeData" delete_btTriangleMeshShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btScaledBvhTriangleMeshShape" new_btScaledBvhTriangleMeshShape) :pointer
  (childShape :pointer)
  (localScaling :pointer))

(cffi:defcfun ("_wrap_delete_btScaledBvhTriangleMeshShape" delete_btScaledBvhTriangleMeshShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_getAabb" btScaledBvhTriangleMeshShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_setLocalScaling" btScaledBvhTriangleMeshShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_getLocalScaling" btScaledBvhTriangleMeshShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_calculateLocalInertia" btScaledBvhTriangleMeshShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_processAllTriangles" btScaledBvhTriangleMeshShape_processAllTriangles) :void
  (self :pointer)
  (callback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_getChildShape__SWIG_0" btScaledBvhTriangleMeshShape_getChildShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_getChildShape__SWIG_1" btScaledBvhTriangleMeshShape_getChildShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_getName" btScaledBvhTriangleMeshShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_calculateSerializeBufferSize" btScaledBvhTriangleMeshShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btScaledBvhTriangleMeshShape_serialize" btScaledBvhTriangleMeshShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btScaledTriangleMeshShapeData" new_btScaledTriangleMeshShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btScaledTriangleMeshShapeData" delete_btScaledTriangleMeshShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCompoundShapeChild" delete_btCompoundShapeChild) :void
  (self :pointer))

(cffi:defcfun ("_wrap___eq____SWIG_2" __eq__) :pointer
  (c1 :pointer)
  (c2 :pointer))

(cffi:defcfun ("_wrap_new_btCompoundShape__SWIG_0" new_btCompoundShape) :pointer
  (enableDynamicAabbTree :pointer))

(cffi:defcfun ("_wrap_new_btCompoundShape__SWIG_1" new_btCompoundShape) :pointer)

(cffi:defcfun ("_wrap_delete_btCompoundShape" delete_btCompoundShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_addChildShape" btCompoundShape_addChildShape) :void
  (self :pointer)
  (localTransform :pointer)
  (shape :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_removeChildShape" btCompoundShape_removeChildShape) :void
  (self :pointer)
  (shape :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_removeChildShapeByIndex" btCompoundShape_removeChildShapeByIndex) :void
  (self :pointer)
  (childShapeindex :int))

(cffi:defcfun ("_wrap_btCompoundShape_getNumChildShapes" btCompoundShape_getNumChildShapes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_getChildShape__SWIG_0" btCompoundShape_getChildShape) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btCompoundShape_getChildShape__SWIG_1" btCompoundShape_getChildShape) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btCompoundShape_getChildTransform__SWIG_0" btCompoundShape_getChildTransform) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btCompoundShape_getChildTransform__SWIG_1" btCompoundShape_getChildTransform) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btCompoundShape_updateChildTransform__SWIG_0" btCompoundShape_updateChildTransform) :void
  (self :pointer)
  (childIndex :int)
  (newChildTransform :pointer)
  (shouldRecalculateLocalAabb :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_updateChildTransform__SWIG_1" btCompoundShape_updateChildTransform) :void
  (self :pointer)
  (childIndex :int)
  (newChildTransform :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_getChildList" btCompoundShape_getChildList) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_getAabb" btCompoundShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_recalculateLocalAabb" btCompoundShape_recalculateLocalAabb) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_setLocalScaling" btCompoundShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_getLocalScaling" btCompoundShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_calculateLocalInertia" btCompoundShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_setMargin" btCompoundShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btCompoundShape_getMargin" btCompoundShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_getName" btCompoundShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_getDynamicAabbTree__SWIG_0" btCompoundShape_getDynamicAabbTree) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_getDynamicAabbTree__SWIG_1" btCompoundShape_getDynamicAabbTree) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_createAabbTreeFromChildren" btCompoundShape_createAabbTreeFromChildren) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_calculatePrincipalAxisTransform" btCompoundShape_calculatePrincipalAxisTransform) :void
  (self :pointer)
  (masses :pointer)
  (principal :pointer)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_getUpdateRevision" btCompoundShape_getUpdateRevision) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_calculateSerializeBufferSize" btCompoundShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCompoundShape_serialize" btCompoundShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btCompoundShapeChildData" new_btCompoundShapeChildData) :pointer)

(cffi:defcfun ("_wrap_delete_btCompoundShapeChildData" delete_btCompoundShapeChildData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCompoundShapeData" new_btCompoundShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btCompoundShapeData" delete_btCompoundShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btBU_Simplex1to4__SWIG_0" new_btBU_Simplex1to4) :pointer)

(cffi:defcfun ("_wrap_new_btBU_Simplex1to4__SWIG_1" new_btBU_Simplex1to4) :pointer
  (pt0 :pointer))

(cffi:defcfun ("_wrap_new_btBU_Simplex1to4__SWIG_2" new_btBU_Simplex1to4) :pointer
  (pt0 :pointer)
  (pt1 :pointer))

(cffi:defcfun ("_wrap_new_btBU_Simplex1to4__SWIG_3" new_btBU_Simplex1to4) :pointer
  (pt0 :pointer)
  (pt1 :pointer)
  (pt2 :pointer))

(cffi:defcfun ("_wrap_new_btBU_Simplex1to4__SWIG_4" new_btBU_Simplex1to4) :pointer
  (pt0 :pointer)
  (pt1 :pointer)
  (pt2 :pointer)
  (pt3 :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_reset" btBU_Simplex1to4_reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getAabb" btBU_Simplex1to4_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_addVertex" btBU_Simplex1to4_addVertex) :void
  (self :pointer)
  (pt :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getNumVertices" btBU_Simplex1to4_getNumVertices) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getNumEdges" btBU_Simplex1to4_getNumEdges) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getEdge" btBU_Simplex1to4_getEdge) :void
  (self :pointer)
  (i :int)
  (pa :pointer)
  (pb :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getVertex" btBU_Simplex1to4_getVertex) :void
  (self :pointer)
  (i :int)
  (vtx :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getNumPlanes" btBU_Simplex1to4_getNumPlanes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getPlane" btBU_Simplex1to4_getPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeSupport :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getIndex" btBU_Simplex1to4_getIndex) :int
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_isInside" btBU_Simplex1to4_isInside) :pointer
  (self :pointer)
  (pt :pointer)
  (tolerance :float))

(cffi:defcfun ("_wrap_btBU_Simplex1to4_getName" btBU_Simplex1to4_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btBU_Simplex1to4" delete_btBU_Simplex1to4) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btEmptyShape" new_btEmptyShape) :pointer)

(cffi:defcfun ("_wrap_delete_btEmptyShape" delete_btEmptyShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btEmptyShape_getAabb" btEmptyShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btEmptyShape_setLocalScaling" btEmptyShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btEmptyShape_getLocalScaling" btEmptyShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btEmptyShape_calculateLocalInertia" btEmptyShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btEmptyShape_getName" btEmptyShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btEmptyShape_processAllTriangles" btEmptyShape_processAllTriangles) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("_wrap_new_btMultiSphereShape" new_btMultiSphereShape) :pointer
  (positions :pointer)
  (radi :pointer)
  (numSpheres :int))

(cffi:defcfun ("_wrap_btMultiSphereShape_calculateLocalInertia" btMultiSphereShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_localGetSupportingVertexWithoutMargin" btMultiSphereShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btMultiSphereShape_getSphereCount" btMultiSphereShape_getSphereCount) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_getSpherePosition" btMultiSphereShape_getSpherePosition) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btMultiSphereShape_getSphereRadius" btMultiSphereShape_getSphereRadius) :float
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btMultiSphereShape_getName" btMultiSphereShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_calculateSerializeBufferSize" btMultiSphereShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_serialize" btMultiSphereShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btMultiSphereShape" delete_btMultiSphereShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btPositionAndRadius" new_btPositionAndRadius) :pointer)

(cffi:defcfun ("_wrap_delete_btPositionAndRadius" delete_btPositionAndRadius) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btMultiSphereShapeData" new_btMultiSphereShapeData) :pointer)

(cffi:defcfun ("_wrap_delete_btMultiSphereShapeData" delete_btMultiSphereShapeData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btUniformScalingShape" new_btUniformScalingShape) :pointer
  (convexChildShape :pointer)
  (uniformScalingFactor :float))

(cffi:defcfun ("_wrap_delete_btUniformScalingShape" delete_btUniformScalingShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_localGetSupportingVertexWithoutMargin" btUniformScalingShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_localGetSupportingVertex" btUniformScalingShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btUniformScalingShape_calculateLocalInertia" btUniformScalingShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getUniformScalingFactor" btUniformScalingShape_getUniformScalingFactor) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getChildShape__SWIG_0" btUniformScalingShape_getChildShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getChildShape__SWIG_1" btUniformScalingShape_getChildShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getName" btUniformScalingShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getAabb" btUniformScalingShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getAabbSlow" btUniformScalingShape_getAabbSlow) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_setLocalScaling" btUniformScalingShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getLocalScaling" btUniformScalingShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_setMargin" btUniformScalingShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btUniformScalingShape_getMargin" btUniformScalingShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getNumPreferredPenetrationDirections" btUniformScalingShape_getNumPreferredPenetrationDirections) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btUniformScalingShape_getPreferredPenetrationDirection" btUniformScalingShape_getPreferredPenetrationDirection) :void
  (self :pointer)
  (index :int)
  (penetrationVector :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionAlgorithmConstructionInfo" delete_btCollisionAlgorithmConstructionInfo) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionAlgorithm" delete_btCollisionAlgorithm) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionAlgorithm_processCollision" btCollisionAlgorithm_processCollision) :void
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer)
  (dispatchInfo :pointer)
  (resultOut :pointer))

(cffi:defcfun ("_wrap_btCollisionAlgorithm_calculateTimeOfImpact" btCollisionAlgorithm_calculateTimeOfImpact) :float
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer)
  (dispatchInfo :pointer)
  (resultOut :pointer))

(cffi:defcfun ("_wrap_btCollisionAlgorithm_getAllContactManifolds" btCollisionAlgorithm_getAllContactManifolds) :void
  (self :pointer)
  (manifoldArray :pointer))

(cffi:defcfun ("_wrap_delete_btActivatingCollisionAlgorithm" delete_btActivatingCollisionAlgorithm) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btSphereSphereCollisionAlgorithm__SWIG_0" new_btSphereSphereCollisionAlgorithm) :pointer
  (mf :pointer)
  (ci :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_new_btSphereSphereCollisionAlgorithm__SWIG_1" new_btSphereSphereCollisionAlgorithm) :pointer
  (ci :pointer))

(cffi:defcfun ("_wrap_btSphereSphereCollisionAlgorithm_processCollision" btSphereSphereCollisionAlgorithm_processCollision) :void
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer)
  (dispatchInfo :pointer)
  (resultOut :pointer))

(cffi:defcfun ("_wrap_btSphereSphereCollisionAlgorithm_calculateTimeOfImpact" btSphereSphereCollisionAlgorithm_calculateTimeOfImpact) :float
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer)
  (dispatchInfo :pointer)
  (resultOut :pointer))

(cffi:defcfun ("_wrap_btSphereSphereCollisionAlgorithm_getAllContactManifolds" btSphereSphereCollisionAlgorithm_getAllContactManifolds) :void
  (self :pointer)
  (manifoldArray :pointer))

(cffi:defcfun ("_wrap_delete_btSphereSphereCollisionAlgorithm" delete_btSphereSphereCollisionAlgorithm) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionConfiguration" delete_btCollisionConfiguration) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionConfiguration_getPersistentManifoldPool" btCollisionConfiguration_getPersistentManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionConfiguration_getCollisionAlgorithmPool" btCollisionConfiguration_getCollisionAlgorithmPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionConfiguration_getStackAllocator" btCollisionConfiguration_getStackAllocator) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionConfiguration_getCollisionAlgorithmCreateFunc" btCollisionConfiguration_getCollisionAlgorithmCreateFunc) :pointer
  (self :pointer)
  (proxyType0 :int)
  (proxyType1 :int))

(cffi:defcfun ("_wrap_delete_btDefaultCollisionConstructionInfo" delete_btDefaultCollisionConstructionInfo) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btDefaultCollisionConfiguration__SWIG_0" new_btDefaultCollisionConfiguration) :pointer
  (constructionInfo :pointer))

(cffi:defcfun ("_wrap_new_btDefaultCollisionConfiguration__SWIG_1" new_btDefaultCollisionConfiguration) :pointer)

(cffi:defcfun ("_wrap_delete_btDefaultCollisionConfiguration" delete_btDefaultCollisionConfiguration) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getPersistentManifoldPool" btDefaultCollisionConfiguration_getPersistentManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getCollisionAlgorithmPool" btDefaultCollisionConfiguration_getCollisionAlgorithmPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getStackAllocator" btDefaultCollisionConfiguration_getStackAllocator) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getSimplexSolver" btDefaultCollisionConfiguration_getSimplexSolver) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc" btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc) :pointer
  (self :pointer)
  (proxyType0 :int)
  (proxyType1 :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0" btDefaultCollisionConfiguration_setConvexConvexMultipointIterations) :void
  (self :pointer)
  (numPerturbationIterations :int)
  (minimumPointsPerturbationThreshold :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1" btDefaultCollisionConfiguration_setConvexConvexMultipointIterations) :void
  (self :pointer)
  (numPerturbationIterations :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2" btDefaultCollisionConfiguration_setConvexConvexMultipointIterations) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0" btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations) :void
  (self :pointer)
  (numPerturbationIterations :int)
  (minimumPointsPerturbationThreshold :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1" btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations) :void
  (self :pointer)
  (numPerturbationIterations :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2" btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btSimpleBroadphaseProxy" delete_btSimpleBroadphaseProxy) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btSimpleBroadphase__SWIG_0" new_btSimpleBroadphase) :pointer
  (maxProxies :int)
  (overlappingPairCache :pointer))

(cffi:defcfun ("_wrap_new_btSimpleBroadphase__SWIG_1" new_btSimpleBroadphase) :pointer
  (maxProxies :int))

(cffi:defcfun ("_wrap_new_btSimpleBroadphase__SWIG_2" new_btSimpleBroadphase) :pointer)

(cffi:defcfun ("_wrap_delete_btSimpleBroadphase" delete_btSimpleBroadphase) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_aabbOverlap" btSimpleBroadphase_aabbOverlap) :pointer
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_createProxy" btSimpleBroadphase_createProxy) :pointer
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (shapeType :int)
  (userPtr :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short)
  (dispatcher :pointer)
  (multiSapProxy :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_calculateOverlappingPairs" btSimpleBroadphase_calculateOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_destroyProxy" btSimpleBroadphase_destroyProxy) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_setAabb" btSimpleBroadphase_setAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_getAabb" btSimpleBroadphase_getAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_rayTest__SWIG_0" btSimpleBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_rayTest__SWIG_1" btSimpleBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_rayTest__SWIG_2" btSimpleBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_aabbTest" btSimpleBroadphase_aabbTest) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (callback :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_getOverlappingPairCache__SWIG_0" btSimpleBroadphase_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_getOverlappingPairCache__SWIG_1" btSimpleBroadphase_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_testAabbOverlap" btSimpleBroadphase_testAabbOverlap) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_getBroadphaseAabb" btSimpleBroadphase_getBroadphaseAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btSimpleBroadphase_printStats" btSimpleBroadphase_printStats) :void
  (self :pointer))

(cl:defconstant DBVT_IMPL_GENERIC 0)

(cl:defconstant DBVT_IMPL_SSE 1)

(cl:defconstant DBVT_USE_TEMPLATE 0)

(cl:defconstant DBVT_USE_INTRINSIC_SSE 1)

(cl:defconstant DBVT_USE_MEMMOVE 1)

(cl:defconstant DBVT_ENABLE_BENCHMARK 0)

(cl:defconstant DBVT_SELECT_IMPL 0)

(cl:defconstant DBVT_MERGE_IMPL 0)

(cl:defconstant DBVT_INT0_IMPL 0)

(cffi:defcfun ("_wrap_new_btDbvtAabbMm" new_btDbvtAabbMm) :pointer)

(cffi:defcfun ("_wrap_delete_btDbvtAabbMm" delete_btDbvtAabbMm) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btDbvtNode" new_btDbvtNode) :pointer)

(cffi:defcfun ("_wrap_delete_btDbvtNode" delete_btDbvtNode) :void
  (self :pointer))

(defanonenum 
	(SIMPLE_STACKSIZE #.64)
	(DOUBLE_STACKSIZE #.(cl:* SIMPE_STACKSIZE 2)))

(cffi:defcfun ("_wrap_Intersect__SWIG_0" Intersect) :pointer
  (a :pointer)
  (b :pointer))

(cffi:defcfun ("_wrap_Intersect__SWIG_1" Intersect) :pointer
  (a :pointer)
  (b :pointer))

(cffi:defcfun ("_wrap_Proximity" Proximity) :float
  (a :pointer)
  (b :pointer))

(cffi:defcfun ("_wrap_Select" Select) :int
  (o :pointer)
  (a :pointer)
  (b :pointer))

(cffi:defcfun ("_wrap_Merge" Merge) :void
  (a :pointer)
  (b :pointer)
  (r :pointer))

(cffi:defcfun ("_wrap_NotEqual" NotEqual) :pointer
  (a :pointer)
  (b :pointer))

(cl:defconstant DBVT_BP_PROFILE 0)

(cl:defconstant DBVT_BP_PREVENTFALSEUPDATE 0)

(cl:defconstant DBVT_BP_ACCURATESLEEPING 0)

(cl:defconstant DBVT_BP_ENABLE_BENCHMARK 0)

(cffi:defcfun ("_wrap_delete_btDbvtProxy" delete_btDbvtProxy) :void
  (self :pointer))

(defanonenum 
	(DYNAMIC_SET #.0)
	(FIXED_SET #.1)
	(STAGECOUNT #.2))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_sets_set" btDbvtBroadphase_m_sets_set) :void
  (self :pointer)
  (m_sets :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_sets_get" btDbvtBroadphase_m_sets_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_stageRoots_set" btDbvtBroadphase_m_stageRoots_set) :void
  (self :pointer)
  (m_stageRoots :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_stageRoots_get" btDbvtBroadphase_m_stageRoots_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_paircache_set" btDbvtBroadphase_m_paircache_set) :void
  (self :pointer)
  (m_paircache :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_paircache_get" btDbvtBroadphase_m_paircache_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_prediction_set" btDbvtBroadphase_m_prediction_set) :void
  (self :pointer)
  (m_prediction :float))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_prediction_get" btDbvtBroadphase_m_prediction_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_stageCurrent_set" btDbvtBroadphase_m_stageCurrent_set) :void
  (self :pointer)
  (m_stageCurrent :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_stageCurrent_get" btDbvtBroadphase_m_stageCurrent_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_fupdates_set" btDbvtBroadphase_m_fupdates_set) :void
  (self :pointer)
  (m_fupdates :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_fupdates_get" btDbvtBroadphase_m_fupdates_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_dupdates_set" btDbvtBroadphase_m_dupdates_set) :void
  (self :pointer)
  (m_dupdates :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_dupdates_get" btDbvtBroadphase_m_dupdates_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_cupdates_set" btDbvtBroadphase_m_cupdates_set) :void
  (self :pointer)
  (m_cupdates :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_cupdates_get" btDbvtBroadphase_m_cupdates_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_newpairs_set" btDbvtBroadphase_m_newpairs_set) :void
  (self :pointer)
  (m_newpairs :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_newpairs_get" btDbvtBroadphase_m_newpairs_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_fixedleft_set" btDbvtBroadphase_m_fixedleft_set) :void
  (self :pointer)
  (m_fixedleft :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_fixedleft_get" btDbvtBroadphase_m_fixedleft_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_call_set" btDbvtBroadphase_m_updates_call_set) :void
  (self :pointer)
  (m_updates_call :unsigned-int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_call_get" btDbvtBroadphase_m_updates_call_get) :unsigned-int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_done_set" btDbvtBroadphase_m_updates_done_set) :void
  (self :pointer)
  (m_updates_done :unsigned-int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_done_get" btDbvtBroadphase_m_updates_done_get) :unsigned-int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_ratio_set" btDbvtBroadphase_m_updates_ratio_set) :void
  (self :pointer)
  (m_updates_ratio :float))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_ratio_get" btDbvtBroadphase_m_updates_ratio_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_pid_set" btDbvtBroadphase_m_pid_set) :void
  (self :pointer)
  (m_pid :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_pid_get" btDbvtBroadphase_m_pid_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_cid_set" btDbvtBroadphase_m_cid_set) :void
  (self :pointer)
  (m_cid :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_cid_get" btDbvtBroadphase_m_cid_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_gid_set" btDbvtBroadphase_m_gid_set) :void
  (self :pointer)
  (m_gid :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_gid_get" btDbvtBroadphase_m_gid_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_releasepaircache_set" btDbvtBroadphase_m_releasepaircache_set) :void
  (self :pointer)
  (m_releasepaircache :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_releasepaircache_get" btDbvtBroadphase_m_releasepaircache_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_deferedcollide_set" btDbvtBroadphase_m_deferedcollide_set) :void
  (self :pointer)
  (m_deferedcollide :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_deferedcollide_get" btDbvtBroadphase_m_deferedcollide_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_needcleanup_set" btDbvtBroadphase_m_needcleanup_set) :void
  (self :pointer)
  (m_needcleanup :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_needcleanup_get" btDbvtBroadphase_m_needcleanup_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btDbvtBroadphase__SWIG_0" new_btDbvtBroadphase) :pointer
  (paircache :pointer))

(cffi:defcfun ("_wrap_new_btDbvtBroadphase__SWIG_1" new_btDbvtBroadphase) :pointer)

(cffi:defcfun ("_wrap_delete_btDbvtBroadphase" delete_btDbvtBroadphase) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_collide" btDbvtBroadphase_collide) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_optimize" btDbvtBroadphase_optimize) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_createProxy" btDbvtBroadphase_createProxy) :pointer
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (shapeType :int)
  (userPtr :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short)
  (dispatcher :pointer)
  (multiSapProxy :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_destroyProxy" btDbvtBroadphase_destroyProxy) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_setAabb" btDbvtBroadphase_setAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_rayTest__SWIG_0" btDbvtBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_rayTest__SWIG_1" btDbvtBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_rayTest__SWIG_2" btDbvtBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_aabbTest" btDbvtBroadphase_aabbTest) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (callback :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getAabb" btDbvtBroadphase_getAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_calculateOverlappingPairs" btDbvtBroadphase_calculateOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getOverlappingPairCache__SWIG_0" btDbvtBroadphase_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getOverlappingPairCache__SWIG_1" btDbvtBroadphase_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getBroadphaseAabb" btDbvtBroadphase_getBroadphaseAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_printStats" btDbvtBroadphase_printStats) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_resetPool" btDbvtBroadphase_resetPool) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_performDeferredRemoval" btDbvtBroadphase_performDeferredRemoval) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_setVelocityPrediction" btDbvtBroadphase_setVelocityPrediction) :void
  (self :pointer)
  (prediction :float))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getVelocityPrediction" btDbvtBroadphase_getVelocityPrediction) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_setAabbForceUpdate" btDbvtBroadphase_setAabbForceUpdate) :void
  (self :pointer)
  (absproxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (arg4 :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_benchmark" btDbvtBroadphase_benchmark) :void
  (arg0 :pointer))

(cl:defconstant USE_OVERLAP_TEST_ON_REMOVES 1)

(cffi:defcvar ("gOverlappingPairs" gOverlappingPairs)
 :int)

(cffi:defcfun ("_wrap_new_btAxisSweep3__SWIG_0" new_btAxisSweep3) :pointer
  (worldAabbMin :pointer)
  (worldAabbMax :pointer)
  (maxHandles :unsigned-short)
  (pairCache :pointer)
  (disableRaycastAccelerator :pointer))

(cffi:defcfun ("_wrap_new_btAxisSweep3__SWIG_1" new_btAxisSweep3) :pointer
  (worldAabbMin :pointer)
  (worldAabbMax :pointer)
  (maxHandles :unsigned-short)
  (pairCache :pointer))

(cffi:defcfun ("_wrap_new_btAxisSweep3__SWIG_2" new_btAxisSweep3) :pointer
  (worldAabbMin :pointer)
  (worldAabbMax :pointer)
  (maxHandles :unsigned-short))

(cffi:defcfun ("_wrap_new_btAxisSweep3__SWIG_3" new_btAxisSweep3) :pointer
  (worldAabbMin :pointer)
  (worldAabbMax :pointer))

(cffi:defcfun ("_wrap_delete_btAxisSweep3" delete_btAxisSweep3) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_bt32BitAxisSweep3__SWIG_0" new_bt32BitAxisSweep3) :pointer
  (worldAabbMin :pointer)
  (worldAabbMax :pointer)
  (maxHandles :unsigned-int)
  (pairCache :pointer)
  (disableRaycastAccelerator :pointer))

(cffi:defcfun ("_wrap_new_bt32BitAxisSweep3__SWIG_1" new_bt32BitAxisSweep3) :pointer
  (worldAabbMin :pointer)
  (worldAabbMax :pointer)
  (maxHandles :unsigned-int)
  (pairCache :pointer))

(cffi:defcfun ("_wrap_new_bt32BitAxisSweep3__SWIG_2" new_bt32BitAxisSweep3) :pointer
  (worldAabbMin :pointer)
  (worldAabbMax :pointer)
  (maxHandles :unsigned-int))

(cffi:defcfun ("_wrap_new_bt32BitAxisSweep3__SWIG_3" new_bt32BitAxisSweep3) :pointer
  (worldAabbMin :pointer)
  (worldAabbMax :pointer))

(cffi:defcfun ("_wrap_delete_bt32BitAxisSweep3" delete_bt32BitAxisSweep3) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_getBroadphaseArray__SWIG_0" btMultiSapBroadphase_getBroadphaseArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_getBroadphaseArray__SWIG_1" btMultiSapBroadphase_getBroadphaseArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btMultiSapBroadphase" delete_btMultiSapBroadphase) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_createProxy" btMultiSapBroadphase_createProxy) :pointer
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (shapeType :int)
  (userPtr :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short)
  (dispatcher :pointer)
  (multiSapProxy :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_destroyProxy" btMultiSapBroadphase_destroyProxy) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_setAabb" btMultiSapBroadphase_setAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_getAabb" btMultiSapBroadphase_getAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_rayTest__SWIG_0" btMultiSapBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_rayTest__SWIG_1" btMultiSapBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_rayTest__SWIG_2" btMultiSapBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_addToChildBroadphase" btMultiSapBroadphase_addToChildBroadphase) :void
  (self :pointer)
  (parentMultiSapProxy :pointer)
  (childProxy :pointer)
  (childBroadphase :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_calculateOverlappingPairs" btMultiSapBroadphase_calculateOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_testAabbOverlap" btMultiSapBroadphase_testAabbOverlap) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_getOverlappingPairCache__SWIG_0" btMultiSapBroadphase_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_getOverlappingPairCache__SWIG_1" btMultiSapBroadphase_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_getBroadphaseAabb" btMultiSapBroadphase_getBroadphaseAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_buildTree" btMultiSapBroadphase_buildTree) :void
  (self :pointer)
  (bvhAabbMin :pointer)
  (bvhAabbMax :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_printStats" btMultiSapBroadphase_printStats) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_quicksort" btMultiSapBroadphase_quicksort) :void
  (self :pointer)
  (a :pointer)
  (lo :int)
  (hi :int))

(cffi:defcfun ("_wrap_btMultiSapBroadphase_resetPool" btMultiSapBroadphase_resetPool) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcstruct btDefaultMotionState
	(m_graphicsWorldTrans :pointer)
	(m_centerOfMassOffset :pointer)
	(m_startWorldTrans :pointer)
	(m_userPointer :pointer)
	(getWorldTransform :pointer)
	(setWorldTransform :pointer))

(cl:defconstant USE_BT_CLOCK 1)

(cffi:defcfun ("_wrap_new_btClock__SWIG_0" new_btClock) :pointer)

(cffi:defcfun ("_wrap_new_btClock__SWIG_1" new_btClock) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_btClock___assign__" btClock___assign__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_delete_btClock" delete_btClock) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btClock_reset" btClock_reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btClock_getTimeMilliseconds" btClock_getTimeMilliseconds) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_btClock_getTimeMicroseconds" btClock_getTimeMicroseconds) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_new_CProfileNode" new_CProfileNode) :pointer
  (name :string)
  (parent :pointer))

(cffi:defcfun ("_wrap_delete_CProfileNode" delete_CProfileNode) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Get_Sub_Node" CProfileNode_Get_Sub_Node) :pointer
  (self :pointer)
  (name :string))

(cffi:defcfun ("_wrap_CProfileNode_Get_Parent" CProfileNode_Get_Parent) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Get_Sibling" CProfileNode_Get_Sibling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Get_Child" CProfileNode_Get_Child) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_CleanupMemory" CProfileNode_CleanupMemory) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Reset" CProfileNode_Reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Call" CProfileNode_Call) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Return" CProfileNode_Return) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Get_Name" CProfileNode_Get_Name) :string
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Get_Total_Calls" CProfileNode_Get_Total_Calls) :int
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_Get_Total_Time" CProfileNode_Get_Total_Time) :float
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_GetUserPointer" CProfileNode_GetUserPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileNode_SetUserPointer" CProfileNode_SetUserPointer) :void
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_First" CProfileIterator_First) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Next" CProfileIterator_Next) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Is_Done" CProfileIterator_Is_Done) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Is_Root" CProfileIterator_Is_Root) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Enter_Child" CProfileIterator_Enter_Child) :void
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_CProfileIterator_Enter_Largest_Child" CProfileIterator_Enter_Largest_Child) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Enter_Parent" CProfileIterator_Enter_Parent) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Get_Current_Name" CProfileIterator_Get_Current_Name) :string
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Get_Current_Total_Calls" CProfileIterator_Get_Current_Total_Calls) :int
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Get_Current_Total_Time" CProfileIterator_Get_Current_Total_Time) :float
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Get_Current_UserPointer" CProfileIterator_Get_Current_UserPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Set_Current_UserPointer" CProfileIterator_Set_Current_UserPointer) :void
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Get_Current_Parent_Name" CProfileIterator_Get_Current_Parent_Name) :string
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Get_Current_Parent_Total_Calls" CProfileIterator_Get_Current_Parent_Total_Calls) :int
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileIterator_Get_Current_Parent_Total_Time" CProfileIterator_Get_Current_Parent_Total_Time) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_CProfileIterator" delete_CProfileIterator) :void
  (self :pointer))

(cffi:defcfun ("_wrap_CProfileManager_Start_Profile" CProfileManager_Start_Profile) :void
  (name :string))

(cffi:defcfun ("_wrap_CProfileManager_Stop_Profile" CProfileManager_Stop_Profile) :void)

(cffi:defcfun ("_wrap_CProfileManager_CleanupMemory" CProfileManager_CleanupMemory) :void)

(cffi:defcfun ("_wrap_CProfileManager_Reset" CProfileManager_Reset) :void)

(cffi:defcfun ("_wrap_CProfileManager_Increment_Frame_Counter" CProfileManager_Increment_Frame_Counter) :void)

(cffi:defcfun ("_wrap_CProfileManager_Get_Frame_Count_Since_Reset" CProfileManager_Get_Frame_Count_Since_Reset) :int)

(cffi:defcfun ("_wrap_CProfileManager_Get_Time_Since_Reset" CProfileManager_Get_Time_Since_Reset) :float)

(cffi:defcfun ("_wrap_CProfileManager_Get_Iterator" CProfileManager_Get_Iterator) :pointer)

(cffi:defcfun ("_wrap_CProfileManager_Release_Iterator" CProfileManager_Release_Iterator) :void
  (iterator :pointer))

(cffi:defcfun ("_wrap_CProfileManager_dumpRecursive" CProfileManager_dumpRecursive) :void
  (profileIterator :pointer)
  (spacing :int))

(cffi:defcfun ("_wrap_CProfileManager_dumpAll" CProfileManager_dumpAll) :void)

(cffi:defcfun ("_wrap_new_CProfileManager" new_CProfileManager) :pointer)

(cffi:defcfun ("_wrap_delete_CProfileManager" delete_CProfileManager) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_CProfileSample" new_CProfileSample) :pointer
  (name :string))

(cffi:defcfun ("_wrap_delete_CProfileSample" delete_CProfileSample) :void
  (self :pointer))

(cffi:defcenum DebugDrawModes
	(:DBG_NoDebug #.0)
	(:DBG_DrawWireframe #.1)
	(:DBG_DrawAabb #.2)
	(:DBG_DrawFeaturesText #.4)
	(:DBG_DrawContactPoints #.8)
	(:DBG_NoDeactivation #.16)
	(:DBG_NoHelpText #.32)
	(:DBG_DrawText #.64)
	(:DBG_ProfileTimings #.128)
	(:DBG_EnableSatComparison #.256)
	(:DBG_DisableBulletLCP #.512)
	(:DBG_EnableCCD #.1024)
	(:DBG_DrawConstraints #.(cl:ash 1 11))
	(:DBG_DrawConstraintLimits #.(cl:ash 1 12))
	(:DBG_FastWireframe #.(cl:ash 1 13))
	:DBG_MAX_DEBUG_DRAW_MODE)

(cffi:defcfun ("_wrap_delete_btIDebugDraw" delete_btIDebugDraw) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawLine__SWIG_0" btIDebugDraw_drawLine) :void
  (self :pointer)
  (from :pointer)
  (to :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawLine__SWIG_1" btIDebugDraw_drawLine) :void
  (self :pointer)
  (from :pointer)
  (to :pointer)
  (fromColor :pointer)
  (toColor :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawSphere__SWIG_0" btIDebugDraw_drawSphere) :void
  (self :pointer)
  (radius :float)
  (transform :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawSphere__SWIG_1" btIDebugDraw_drawSphere) :void
  (self :pointer)
  (p :pointer)
  (radius :float)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawTriangle__SWIG_0" btIDebugDraw_drawTriangle) :void
  (self :pointer)
  (v0 :pointer)
  (v1 :pointer)
  (v2 :pointer)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer)
  (color :pointer)
  (alpha :float))

(cffi:defcfun ("_wrap_btIDebugDraw_drawTriangle__SWIG_1" btIDebugDraw_drawTriangle) :void
  (self :pointer)
  (v0 :pointer)
  (v1 :pointer)
  (v2 :pointer)
  (color :pointer)
  (arg5 :float))

(cffi:defcfun ("_wrap_btIDebugDraw_drawContactPoint" btIDebugDraw_drawContactPoint) :void
  (self :pointer)
  (PointOnB :pointer)
  (normalOnB :pointer)
  (distance :float)
  (lifeTime :int)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_reportErrorWarning" btIDebugDraw_reportErrorWarning) :void
  (self :pointer)
  (warningString :string))

(cffi:defcfun ("_wrap_btIDebugDraw_draw3dText" btIDebugDraw_draw3dText) :void
  (self :pointer)
  (location :pointer)
  (textString :string))

(cffi:defcfun ("_wrap_btIDebugDraw_setDebugMode" btIDebugDraw_setDebugMode) :void
  (self :pointer)
  (debugMode :int))

(cffi:defcfun ("_wrap_btIDebugDraw_getDebugMode" btIDebugDraw_getDebugMode) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawAabb" btIDebugDraw_drawAabb) :void
  (self :pointer)
  (from :pointer)
  (to :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawTransform" btIDebugDraw_drawTransform) :void
  (self :pointer)
  (transform :pointer)
  (orthoLen :float))

(cffi:defcfun ("_wrap_btIDebugDraw_drawArc__SWIG_0" btIDebugDraw_drawArc) :void
  (self :pointer)
  (center :pointer)
  (normal :pointer)
  (axis :pointer)
  (radiusA :float)
  (radiusB :float)
  (minAngle :float)
  (maxAngle :float)
  (color :pointer)
  (drawSect :pointer)
  (stepDegrees :float))

(cffi:defcfun ("_wrap_btIDebugDraw_drawArc__SWIG_1" btIDebugDraw_drawArc) :void
  (self :pointer)
  (center :pointer)
  (normal :pointer)
  (axis :pointer)
  (radiusA :float)
  (radiusB :float)
  (minAngle :float)
  (maxAngle :float)
  (color :pointer)
  (drawSect :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawSpherePatch__SWIG_0" btIDebugDraw_drawSpherePatch) :void
  (self :pointer)
  (center :pointer)
  (up :pointer)
  (axis :pointer)
  (radius :float)
  (minTh :float)
  (maxTh :float)
  (minPs :float)
  (maxPs :float)
  (color :pointer)
  (stepDegrees :float))

(cffi:defcfun ("_wrap_btIDebugDraw_drawSpherePatch__SWIG_1" btIDebugDraw_drawSpherePatch) :void
  (self :pointer)
  (center :pointer)
  (up :pointer)
  (axis :pointer)
  (radius :float)
  (minTh :float)
  (maxTh :float)
  (minPs :float)
  (maxPs :float)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawBox__SWIG_0" btIDebugDraw_drawBox) :void
  (self :pointer)
  (bbMin :pointer)
  (bbMax :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawBox__SWIG_1" btIDebugDraw_drawBox) :void
  (self :pointer)
  (bbMin :pointer)
  (bbMax :pointer)
  (trans :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawCapsule" btIDebugDraw_drawCapsule) :void
  (self :pointer)
  (radius :float)
  (halfHeight :float)
  (upAxis :int)
  (transform :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawCylinder" btIDebugDraw_drawCylinder) :void
  (self :pointer)
  (radius :float)
  (halfHeight :float)
  (upAxis :int)
  (transform :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawCone" btIDebugDraw_drawCone) :void
  (self :pointer)
  (radius :float)
  (height :float)
  (upAxis :int)
  (transform :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btIDebugDraw_drawPlane" btIDebugDraw_drawPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeConst :float)
  (transform :pointer)
  (color :pointer))

(cffi:defcenum btSolverMode
	(:SOLVER_RANDMIZE_ORDER #.1)
	(:SOLVER_FRICTION_SEPARATE #.2)
	(:SOLVER_USE_WARMSTARTING #.4)
	(:SOLVER_USE_FRICTION_WARMSTARTING #.8)
	(:SOLVER_USE_2_FRICTION_DIRECTIONS #.16)
	(:SOLVER_ENABLE_FRICTION_DIRECTION_CACHING #.32)
	(:SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION #.64)
	(:SOLVER_CACHE_FRIENDLY #.128)
	(:SOLVER_SIMD #.256)
	(:SOLVER_CUDA #.512))

(cffi:defcfun ("_wrap_new_btContactSolverInfoData" new_btContactSolverInfoData) :pointer)

(cffi:defcfun ("_wrap_delete_btContactSolverInfoData" delete_btContactSolverInfoData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btContactSolverInfo" delete_btContactSolverInfo) :void
  (self :pointer))

(cffi:defcenum btDynamicsWorldType
	(:BT_SIMPLE_DYNAMICS_WORLD #.1)
	(:BT_DISCRETE_DYNAMICS_WORLD #.2)
	(:BT_CONTINUOUS_DYNAMICS_WORLD #.3)
	(:BT_SOFT_RIGID_DYNAMICS_WORLD #.4))

(cffi:defcfun ("_wrap_delete_btDynamicsWorld" delete_btDynamicsWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_stepSimulation__SWIG_0" btDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int)
  (fixedTimeStep :float))

(cffi:defcfun ("_wrap_btDynamicsWorld_stepSimulation__SWIG_1" btDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int))

(cffi:defcfun ("_wrap_btDynamicsWorld_stepSimulation__SWIG_2" btDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btDynamicsWorld_debugDrawWorld" btDynamicsWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addConstraint__SWIG_0" btDynamicsWorld_addConstraint) :void
  (self :pointer)
  (constraint :pointer)
  (disableCollisionsBetweenLinkedBodies :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addConstraint__SWIG_1" btDynamicsWorld_addConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeConstraint" btDynamicsWorld_removeConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addAction" btDynamicsWorld_addAction) :void
  (self :pointer)
  (action :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeAction" btDynamicsWorld_removeAction) :void
  (self :pointer)
  (action :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setGravity" btDynamicsWorld_setGravity) :void
  (self :pointer)
  (gravity :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getGravity" btDynamicsWorld_getGravity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_synchronizeMotionStates" btDynamicsWorld_synchronizeMotionStates) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addRigidBody__SWIG_0" btDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addRigidBody__SWIG_1" btDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer)
  (group :short)
  (mask :short))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeRigidBody" btDynamicsWorld_removeRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setConstraintSolver" btDynamicsWorld_setConstraintSolver) :void
  (self :pointer)
  (solver :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getConstraintSolver" btDynamicsWorld_getConstraintSolver) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getNumConstraints" btDynamicsWorld_getNumConstraints) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getConstraint__SWIG_0" btDynamicsWorld_getConstraint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDynamicsWorld_getConstraint__SWIG_1" btDynamicsWorld_getConstraint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDynamicsWorld_getWorldType" btDynamicsWorld_getWorldType) btDynamicsWorldType
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_clearForces" btDynamicsWorld_clearForces) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_0" btDynamicsWorld_setInternalTickCallback) :void
  (self :pointer)
  (cb :pointer)
  (worldUserInfo :pointer)
  (isPreTick :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_1" btDynamicsWorld_setInternalTickCallback) :void
  (self :pointer)
  (cb :pointer)
  (worldUserInfo :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_2" btDynamicsWorld_setInternalTickCallback) :void
  (self :pointer)
  (cb :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setWorldUserInfo" btDynamicsWorld_setWorldUserInfo) :void
  (self :pointer)
  (worldUserInfo :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getWorldUserInfo" btDynamicsWorld_getWorldUserInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getSolverInfo" btDynamicsWorld_getSolverInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addVehicle" btDynamicsWorld_addVehicle) :void
  (self :pointer)
  (vehicle :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeVehicle" btDynamicsWorld_removeVehicle) :void
  (self :pointer)
  (vehicle :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addCharacter" btDynamicsWorld_addCharacter) :void
  (self :pointer)
  (character :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeCharacter" btDynamicsWorld_removeCharacter) :void
  (self :pointer)
  (character :pointer))

(cffi:defcfun ("_wrap_new_btDiscreteDynamicsWorld" new_btDiscreteDynamicsWorld) :pointer
  (dispatcher :pointer)
  (pairCache :pointer)
  (constraintSolver :pointer)
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btDiscreteDynamicsWorld" delete_btDiscreteDynamicsWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_0" btDiscreteDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int)
  (fixedTimeStep :float))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_1" btDiscreteDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_2" btDiscreteDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_synchronizeMotionStates" btDiscreteDynamicsWorld_synchronizeMotionStates) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_synchronizeSingleMotionState" btDiscreteDynamicsWorld_synchronizeSingleMotionState) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_0" btDiscreteDynamicsWorld_addConstraint) :void
  (self :pointer)
  (constraint :pointer)
  (disableCollisionsBetweenLinkedBodies :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_1" btDiscreteDynamicsWorld_addConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeConstraint" btDiscreteDynamicsWorld_removeConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addAction" btDiscreteDynamicsWorld_addAction) :void
  (self :pointer)
  (arg1 :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeAction" btDiscreteDynamicsWorld_removeAction) :void
  (self :pointer)
  (arg1 :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0" btDiscreteDynamicsWorld_getSimulationIslandManager) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_1" btDiscreteDynamicsWorld_getSimulationIslandManager) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getCollisionWorld" btDiscreteDynamicsWorld_getCollisionWorld) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setGravity" btDiscreteDynamicsWorld_setGravity) :void
  (self :pointer)
  (gravity :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getGravity" btDiscreteDynamicsWorld_getGravity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0" btDiscreteDynamicsWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1" btDiscreteDynamicsWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2" btDiscreteDynamicsWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_0" btDiscreteDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_1" btDiscreteDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer)
  (group :short)
  (mask :short))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeRigidBody" btDiscreteDynamicsWorld_removeRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeCollisionObject" btDiscreteDynamicsWorld_removeCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_debugDrawConstraint" btDiscreteDynamicsWorld_debugDrawConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_debugDrawWorld" btDiscreteDynamicsWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setConstraintSolver" btDiscreteDynamicsWorld_setConstraintSolver) :void
  (self :pointer)
  (solver :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraintSolver" btDiscreteDynamicsWorld_getConstraintSolver) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getNumConstraints" btDiscreteDynamicsWorld_getNumConstraints) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_0" btDiscreteDynamicsWorld_getConstraint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_1" btDiscreteDynamicsWorld_getConstraint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getWorldType" btDiscreteDynamicsWorld_getWorldType) btDynamicsWorldType
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_clearForces" btDiscreteDynamicsWorld_clearForces) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_applyGravity" btDiscreteDynamicsWorld_applyGravity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setNumTasks" btDiscreteDynamicsWorld_setNumTasks) :void
  (self :pointer)
  (numTasks :int))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_updateVehicles" btDiscreteDynamicsWorld_updateVehicles) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addVehicle" btDiscreteDynamicsWorld_addVehicle) :void
  (self :pointer)
  (vehicle :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeVehicle" btDiscreteDynamicsWorld_removeVehicle) :void
  (self :pointer)
  (vehicle :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCharacter" btDiscreteDynamicsWorld_addCharacter) :void
  (self :pointer)
  (character :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeCharacter" btDiscreteDynamicsWorld_removeCharacter) :void
  (self :pointer)
  (character :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates" btDiscreteDynamicsWorld_setSynchronizeAllMotionStates) :void
  (self :pointer)
  (synchronizeAll :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates" btDiscreteDynamicsWorld_getSynchronizeAllMotionStates) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_serialize" btDiscreteDynamicsWorld_serialize) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btSimpleDynamicsWorld" new_btSimpleDynamicsWorld) :pointer
  (dispatcher :pointer)
  (pairCache :pointer)
  (constraintSolver :pointer)
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btSimpleDynamicsWorld" delete_btSimpleDynamicsWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_0" btSimpleDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int)
  (fixedTimeStep :float))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_1" btSimpleDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_2" btSimpleDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_setGravity" btSimpleDynamicsWorld_setGravity) :void
  (self :pointer)
  (gravity :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getGravity" btSimpleDynamicsWorld_getGravity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_0" btSimpleDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_1" btSimpleDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer)
  (group :short)
  (mask :short))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeRigidBody" btSimpleDynamicsWorld_removeRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_debugDrawWorld" btSimpleDynamicsWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addAction" btSimpleDynamicsWorld_addAction) :void
  (self :pointer)
  (action :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeAction" btSimpleDynamicsWorld_removeAction) :void
  (self :pointer)
  (action :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeCollisionObject" btSimpleDynamicsWorld_removeCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_updateAabbs" btSimpleDynamicsWorld_updateAabbs) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_synchronizeMotionStates" btSimpleDynamicsWorld_synchronizeMotionStates) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_setConstraintSolver" btSimpleDynamicsWorld_setConstraintSolver) :void
  (self :pointer)
  (solver :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getConstraintSolver" btSimpleDynamicsWorld_getConstraintSolver) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getWorldType" btSimpleDynamicsWorld_getWorldType) btDynamicsWorldType
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_clearForces" btSimpleDynamicsWorld_clearForces) :void
  (self :pointer))

(cffi:defcvar ("gDeactivationTime" gDeactivationTime)
 :float)

(cffi:defcvar ("gDisableDeactivation" gDisableDeactivation)
 :pointer)

(cl:defconstant btRigidBodyDataName "btRigidBodyFloatData")

(cffi:defcenum btRigidBodyFlags
	(:BT_DISABLE_WORLD_GRAVITY #.1))

(cffi:defcfun ("_wrap_new_btRigidBody__SWIG_0" new_btRigidBody) :pointer
  (constructionInfo :pointer))

(cffi:defcfun ("_wrap_new_btRigidBody__SWIG_1" new_btRigidBody) :pointer
  (mass :float)
  (motionState :pointer)
  (collisionShape :pointer)
  (localInertia :pointer))

(cffi:defcfun ("_wrap_new_btRigidBody__SWIG_2" new_btRigidBody) :pointer
  (mass :float)
  (motionState :pointer)
  (collisionShape :pointer))

(cffi:defcfun ("_wrap_delete_btRigidBody" delete_btRigidBody) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_proceedToTransform" btRigidBody_proceedToTransform) :void
  (self :pointer)
  (newTrans :pointer))

(cffi:defcfun ("_wrap_btRigidBody_upcast__SWIG_0" btRigidBody_upcast) :pointer
  (colObj :pointer))

(cffi:defcfun ("_wrap_btRigidBody_upcast__SWIG_1" btRigidBody_upcast) :pointer
  (colObj :pointer))

(cffi:defcfun ("_wrap_btRigidBody_predictIntegratedTransform" btRigidBody_predictIntegratedTransform) :void
  (self :pointer)
  (step :float)
  (predictedTransform :pointer))

(cffi:defcfun ("_wrap_btRigidBody_saveKinematicState" btRigidBody_saveKinematicState) :void
  (self :pointer)
  (step :float))

(cffi:defcfun ("_wrap_btRigidBody_applyGravity" btRigidBody_applyGravity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setGravity" btRigidBody_setGravity) :void
  (self :pointer)
  (acceleration :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getGravity" btRigidBody_getGravity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setDamping" btRigidBody_setDamping) :void
  (self :pointer)
  (lin_damping :float)
  (ang_damping :float))

(cffi:defcfun ("_wrap_btRigidBody_getLinearDamping" btRigidBody_getLinearDamping) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getAngularDamping" btRigidBody_getAngularDamping) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getLinearSleepingThreshold" btRigidBody_getLinearSleepingThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getAngularSleepingThreshold" btRigidBody_getAngularSleepingThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyDamping" btRigidBody_applyDamping) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btRigidBody_getCollisionShape__SWIG_0" btRigidBody_getCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getCollisionShape__SWIG_1" btRigidBody_getCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setMassProps" btRigidBody_setMassProps) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getLinearFactor" btRigidBody_getLinearFactor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setLinearFactor" btRigidBody_setLinearFactor) :void
  (self :pointer)
  (linearFactor :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getInvMass" btRigidBody_getInvMass) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getInvInertiaTensorWorld" btRigidBody_getInvInertiaTensorWorld) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_integrateVelocities" btRigidBody_integrateVelocities) :void
  (self :pointer)
  (step :float))

(cffi:defcfun ("_wrap_btRigidBody_setCenterOfMassTransform" btRigidBody_setCenterOfMassTransform) :void
  (self :pointer)
  (xform :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyCentralForce" btRigidBody_applyCentralForce) :void
  (self :pointer)
  (force :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getTotalForce" btRigidBody_getTotalForce) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getTotalTorque" btRigidBody_getTotalTorque) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getInvInertiaDiagLocal" btRigidBody_getInvInertiaDiagLocal) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setInvInertiaDiagLocal" btRigidBody_setInvInertiaDiagLocal) :void
  (self :pointer)
  (diagInvInertia :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setSleepingThresholds" btRigidBody_setSleepingThresholds) :void
  (self :pointer)
  (linear :float)
  (angular :float))

(cffi:defcfun ("_wrap_btRigidBody_applyTorque" btRigidBody_applyTorque) :void
  (self :pointer)
  (torque :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyForce" btRigidBody_applyForce) :void
  (self :pointer)
  (force :pointer)
  (rel_pos :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyCentralImpulse" btRigidBody_applyCentralImpulse) :void
  (self :pointer)
  (impulse :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyTorqueImpulse" btRigidBody_applyTorqueImpulse) :void
  (self :pointer)
  (torque :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyImpulse" btRigidBody_applyImpulse) :void
  (self :pointer)
  (impulse :pointer)
  (rel_pos :pointer))

(cffi:defcfun ("_wrap_btRigidBody_clearForces" btRigidBody_clearForces) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_updateInertiaTensor" btRigidBody_updateInertiaTensor) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getCenterOfMassPosition" btRigidBody_getCenterOfMassPosition) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getOrientation" btRigidBody_getOrientation) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getCenterOfMassTransform" btRigidBody_getCenterOfMassTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getLinearVelocity" btRigidBody_getLinearVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getAngularVelocity" btRigidBody_getAngularVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setLinearVelocity" btRigidBody_setLinearVelocity) :void
  (self :pointer)
  (lin_vel :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setAngularVelocity" btRigidBody_setAngularVelocity) :void
  (self :pointer)
  (ang_vel :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getVelocityInLocalPoint" btRigidBody_getVelocityInLocalPoint) :pointer
  (self :pointer)
  (rel_pos :pointer))

(cffi:defcfun ("_wrap_btRigidBody_translate" btRigidBody_translate) :void
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getAabb" btRigidBody_getAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btRigidBody_computeImpulseDenominator" btRigidBody_computeImpulseDenominator) :float
  (self :pointer)
  (pos :pointer)
  (normal :pointer))

(cffi:defcfun ("_wrap_btRigidBody_computeAngularImpulseDenominator" btRigidBody_computeAngularImpulseDenominator) :float
  (self :pointer)
  (axis :pointer))

(cffi:defcfun ("_wrap_btRigidBody_updateDeactivation" btRigidBody_updateDeactivation) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btRigidBody_wantsSleeping" btRigidBody_wantsSleeping) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getBroadphaseProxy__SWIG_0" btRigidBody_getBroadphaseProxy) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getBroadphaseProxy__SWIG_1" btRigidBody_getBroadphaseProxy) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setNewBroadphaseProxy" btRigidBody_setNewBroadphaseProxy) :void
  (self :pointer)
  (broadphaseProxy :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getMotionState__SWIG_0" btRigidBody_getMotionState) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getMotionState__SWIG_1" btRigidBody_getMotionState) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setMotionState" btRigidBody_setMotionState) :void
  (self :pointer)
  (motionState :pointer))

(cffi:defcfun ("_wrap_btRigidBody_m_contactSolverType_set" btRigidBody_m_contactSolverType_set) :void
  (self :pointer)
  (m_contactSolverType :int))

(cffi:defcfun ("_wrap_btRigidBody_m_contactSolverType_get" btRigidBody_m_contactSolverType_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_m_frictionSolverType_set" btRigidBody_m_frictionSolverType_set) :void
  (self :pointer)
  (m_frictionSolverType :int))

(cffi:defcfun ("_wrap_btRigidBody_m_frictionSolverType_get" btRigidBody_m_frictionSolverType_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setAngularFactor__SWIG_0" btRigidBody_setAngularFactor) :void
  (self :pointer)
  (angFac :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setAngularFactor__SWIG_1" btRigidBody_setAngularFactor) :void
  (self :pointer)
  (angFac :float))

(cffi:defcfun ("_wrap_btRigidBody_getAngularFactor" btRigidBody_getAngularFactor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_isInWorld" btRigidBody_isInWorld) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_checkCollideWithOverride" btRigidBody_checkCollideWithOverride) :pointer
  (self :pointer)
  (co :pointer))

(cffi:defcfun ("_wrap_btRigidBody_addConstraintRef" btRigidBody_addConstraintRef) :void
  (self :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_btRigidBody_removeConstraintRef" btRigidBody_removeConstraintRef) :void
  (self :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getConstraintRef" btRigidBody_getConstraintRef) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btRigidBody_getNumConstraintRefs" btRigidBody_getNumConstraintRefs) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setFlags" btRigidBody_setFlags) :void
  (self :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_btRigidBody_getFlags" btRigidBody_getFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getDeltaLinearVelocity" btRigidBody_getDeltaLinearVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getDeltaAngularVelocity" btRigidBody_getDeltaAngularVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getPushVelocity" btRigidBody_getPushVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getTurnVelocity" btRigidBody_getTurnVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalGetDeltaLinearVelocity" btRigidBody_internalGetDeltaLinearVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalGetDeltaAngularVelocity" btRigidBody_internalGetDeltaAngularVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalGetAngularFactor" btRigidBody_internalGetAngularFactor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalGetInvMass" btRigidBody_internalGetInvMass) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalGetPushVelocity" btRigidBody_internalGetPushVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalGetTurnVelocity" btRigidBody_internalGetTurnVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalGetVelocityInLocalPointObsolete" btRigidBody_internalGetVelocityInLocalPointObsolete) :void
  (self :pointer)
  (rel_pos :pointer)
  (velocity :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalGetAngularVelocity" btRigidBody_internalGetAngularVelocity) :void
  (self :pointer)
  (angVel :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalApplyImpulse" btRigidBody_internalApplyImpulse) :void
  (self :pointer)
  (linearComponent :pointer)
  (angularComponent :pointer)
  (impulseMagnitude :float))

(cffi:defcfun ("_wrap_btRigidBody_internalApplyPushImpulse" btRigidBody_internalApplyPushImpulse) :void
  (self :pointer)
  (linearComponent :pointer)
  (angularComponent :pointer)
  (impulseMagnitude :float))

(cffi:defcfun ("_wrap_btRigidBody_internalWritebackVelocity__SWIG_0" btRigidBody_internalWritebackVelocity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_internalWritebackVelocity__SWIG_1" btRigidBody_internalWritebackVelocity) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btRigidBody_calculateSerializeBufferSize" btRigidBody_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_serialize" btRigidBody_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btRigidBody_serializeSingleObject" btRigidBody_serializeSingleObject) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btRigidBodyFloatData" new_btRigidBodyFloatData) :pointer)

(cffi:defcfun ("_wrap_delete_btRigidBodyFloatData" delete_btRigidBodyFloatData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btRigidBodyDoubleData" new_btRigidBodyDoubleData) :pointer)

(cffi:defcfun ("_wrap_delete_btRigidBodyDoubleData" delete_btRigidBodyDoubleData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btJacobianEntry__SWIG_0" new_btJacobianEntry) :pointer)

(cffi:defcfun ("_wrap_new_btJacobianEntry__SWIG_1" new_btJacobianEntry) :pointer
  (world2A :pointer)
  (world2B :pointer)
  (rel_pos1 :pointer)
  (rel_pos2 :pointer)
  (jointAxis :pointer)
  (inertiaInvA :pointer)
  (massInvA :float)
  (inertiaInvB :pointer)
  (massInvB :float))

(cffi:defcfun ("_wrap_new_btJacobianEntry__SWIG_2" new_btJacobianEntry) :pointer
  (jointAxis :pointer)
  (world2A :pointer)
  (world2B :pointer)
  (inertiaInvA :pointer)
  (inertiaInvB :pointer))

(cffi:defcfun ("_wrap_new_btJacobianEntry__SWIG_3" new_btJacobianEntry) :pointer
  (axisInA :pointer)
  (axisInB :pointer)
  (inertiaInvA :pointer)
  (inertiaInvB :pointer))

(cffi:defcfun ("_wrap_new_btJacobianEntry__SWIG_4" new_btJacobianEntry) :pointer
  (world2A :pointer)
  (rel_pos1 :pointer)
  (rel_pos2 :pointer)
  (jointAxis :pointer)
  (inertiaInvA :pointer)
  (massInvA :float))

(cffi:defcfun ("_wrap_btJacobianEntry_getDiagonal" btJacobianEntry_getDiagonal) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_getNonDiagonal__SWIG_0" btJacobianEntry_getNonDiagonal) :float
  (self :pointer)
  (jacB :pointer)
  (massInvA :float))

(cffi:defcfun ("_wrap_btJacobianEntry_getNonDiagonal__SWIG_1" btJacobianEntry_getNonDiagonal) :float
  (self :pointer)
  (jacB :pointer)
  (massInvA :float)
  (massInvB :float))

(cffi:defcfun ("_wrap_btJacobianEntry_getRelativeVelocity" btJacobianEntry_getRelativeVelocity) :float
  (self :pointer)
  (linvelA :pointer)
  (angvelA :pointer)
  (linvelB :pointer)
  (angvelB :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_linearJointAxis_set" btJacobianEntry_m_linearJointAxis_set) :void
  (self :pointer)
  (m_linearJointAxis :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_linearJointAxis_get" btJacobianEntry_m_linearJointAxis_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_aJ_set" btJacobianEntry_m_aJ_set) :void
  (self :pointer)
  (m_aJ :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_aJ_get" btJacobianEntry_m_aJ_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_bJ_set" btJacobianEntry_m_bJ_set) :void
  (self :pointer)
  (m_bJ :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_bJ_get" btJacobianEntry_m_bJ_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_0MinvJt_set" btJacobianEntry_m_0MinvJt_set) :void
  (self :pointer)
  (m_0MinvJt :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_0MinvJt_get" btJacobianEntry_m_0MinvJt_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_1MinvJt_set" btJacobianEntry_m_1MinvJt_set) :void
  (self :pointer)
  (m_1MinvJt :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_1MinvJt_get" btJacobianEntry_m_1MinvJt_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btJacobianEntry_m_Adiag_set" btJacobianEntry_m_Adiag_set) :void
  (self :pointer)
  (m_Adiag :float))

(cffi:defcfun ("_wrap_btJacobianEntry_m_Adiag_get" btJacobianEntry_m_Adiag_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btJacobianEntry" delete_btJacobianEntry) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btSolverBodyObsolete" delete_btSolverBodyObsolete) :void
  (self :pointer))

(defanonenum 
	(BT_SOLVER_CONTACT_1D #.0)
	BT_SOLVER_FRICTION_1D)

(cffi:defcfun ("_wrap_delete_btSolverConstraint" delete_btSolverConstraint) :void
  (self :pointer))

(cffi:defcenum btTypedConstraintType
	(:POINT2POINT_CONSTRAINT_TYPE #.3)
	:HINGE_CONSTRAINT_TYPE
	:CONETWIST_CONSTRAINT_TYPE
	:D6_CONSTRAINT_TYPE
	:SLIDER_CONSTRAINT_TYPE
	:CONTACT_CONSTRAINT_TYPE
	:D6_SPRING_CONSTRAINT_TYPE
	:MAX_CONSTRAINT_TYPE)

(cffi:defcenum btConstraintParams
	(:BT_CONSTRAINT_ERP #.1)
	:BT_CONSTRAINT_STOP_ERP
	:BT_CONSTRAINT_CFM
	:BT_CONSTRAINT_STOP_CFM)

(cffi:defcfun ("_wrap_delete_btTypedConstraint" delete_btTypedConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_buildJacobian" btTypedConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setupSolverConstraint" btTypedConstraint_setupSolverConstraint) :void
  (self :pointer)
  (ca :pointer)
  (solverBodyA :int)
  (solverBodyB :int)
  (timeStep :float))

(cffi:defcfun ("_wrap_btTypedConstraint_getInfo1" btTypedConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getInfo2" btTypedConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_internalSetAppliedImpulse" btTypedConstraint_internalSetAppliedImpulse) :void
  (self :pointer)
  (appliedImpulse :float))

(cffi:defcfun ("_wrap_btTypedConstraint_internalGetAppliedImpulse" btTypedConstraint_internalGetAppliedImpulse) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getBreakingImpulseThreshold" btTypedConstraint_getBreakingImpulseThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setBreakingImpulseThreshold" btTypedConstraint_setBreakingImpulseThreshold) :void
  (self :pointer)
  (threshold :float))

(cffi:defcfun ("_wrap_btTypedConstraint_isEnabled" btTypedConstraint_isEnabled) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setEnabled" btTypedConstraint_setEnabled) :void
  (self :pointer)
  (enabled :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_solveConstraintObsolete" btTypedConstraint_solveConstraintObsolete) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :float))

(cffi:defcfun ("_wrap_btTypedConstraint_getRigidBodyA__SWIG_0" btTypedConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getRigidBodyB__SWIG_0" btTypedConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getRigidBodyA__SWIG_1" btTypedConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getRigidBodyB__SWIG_1" btTypedConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getUserConstraintType" btTypedConstraint_getUserConstraintType) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setUserConstraintType" btTypedConstraint_setUserConstraintType) :void
  (self :pointer)
  (userConstraintType :int))

(cffi:defcfun ("_wrap_btTypedConstraint_setUserConstraintId" btTypedConstraint_setUserConstraintId) :void
  (self :pointer)
  (uid :int))

(cffi:defcfun ("_wrap_btTypedConstraint_getUserConstraintId" btTypedConstraint_getUserConstraintId) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setUserConstraintPtr" btTypedConstraint_setUserConstraintPtr) :void
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getUserConstraintPtr" btTypedConstraint_getUserConstraintPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getUid" btTypedConstraint_getUid) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_needsFeedback" btTypedConstraint_needsFeedback) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_enableFeedback" btTypedConstraint_enableFeedback) :void
  (self :pointer)
  (needsFeedback :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getAppliedImpulse" btTypedConstraint_getAppliedImpulse) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getConstraintType" btTypedConstraint_getConstraintType) btTypedConstraintType
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setDbgDrawSize" btTypedConstraint_setDbgDrawSize) :void
  (self :pointer)
  (dbgDrawSize :float))

(cffi:defcfun ("_wrap_btTypedConstraint_getDbgDrawSize" btTypedConstraint_getDbgDrawSize) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setParam__SWIG_0" btTypedConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btTypedConstraint_setParam__SWIG_1" btTypedConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btTypedConstraint_getParam__SWIG_0" btTypedConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btTypedConstraint_getParam__SWIG_1" btTypedConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btTypedConstraint_calculateSerializeBufferSize" btTypedConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_serialize" btTypedConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btAdjustAngleToLimits" btAdjustAngleToLimits) :float
  (angleInRadians :float)
  (angleLowerLimitInRadians :float)
  (angleUpperLimitInRadians :float))

(cffi:defcfun ("_wrap_new_btTypedConstraintData" new_btTypedConstraintData) :pointer)

(cffi:defcfun ("_wrap_delete_btTypedConstraintData" delete_btTypedConstraintData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btAngularLimit" new_btAngularLimit) :pointer)

(cffi:defcfun ("_wrap_btAngularLimit_set__SWIG_0" btAngularLimit_set) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float)
  (_biasFactor :float)
  (_relaxationFactor :float))

(cffi:defcfun ("_wrap_btAngularLimit_set__SWIG_1" btAngularLimit_set) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float)
  (_biasFactor :float))

(cffi:defcfun ("_wrap_btAngularLimit_set__SWIG_2" btAngularLimit_set) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float))

(cffi:defcfun ("_wrap_btAngularLimit_set__SWIG_3" btAngularLimit_set) :void
  (self :pointer)
  (low :float)
  (high :float))

(cffi:defcfun ("_wrap_btAngularLimit_test" btAngularLimit_test) :void
  (self :pointer)
  (angle :float))

(cffi:defcfun ("_wrap_btAngularLimit_getSoftness" btAngularLimit_getSoftness) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getBiasFactor" btAngularLimit_getBiasFactor) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getRelaxationFactor" btAngularLimit_getRelaxationFactor) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getCorrection" btAngularLimit_getCorrection) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getSign" btAngularLimit_getSign) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getHalfRange" btAngularLimit_getHalfRange) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_isLimit" btAngularLimit_isLimit) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_fit" btAngularLimit_fit) :void
  (self :pointer)
  (angle :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getError" btAngularLimit_getError) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getLow" btAngularLimit_getLow) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getHigh" btAngularLimit_getHigh) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btAngularLimit" delete_btAngularLimit) :void
  (self :pointer))

(cl:defconstant btPoint2PointConstraintDataName "btPoint2PointConstraintFloatData")

(cffi:defcfun ("_wrap_delete_btConstraintSetting" delete_btConstraintSetting) :void
  (self :pointer))

(cffi:defcenum btPoint2PointFlags
	(:BT_P2P_FLAGS_ERP #.1)
	(:BT_P2P_FLAGS_CFM #.2))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_set" btPoint2PointConstraint_m_useSolveConstraintObsolete_set) :void
  (self :pointer)
  (m_useSolveConstraintObsolete :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_get" btPoint2PointConstraint_m_useSolveConstraintObsolete_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_m_setting_set" btPoint2PointConstraint_m_setting_set) :void
  (self :pointer)
  (m_setting :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_m_setting_get" btPoint2PointConstraint_m_setting_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btPoint2PointConstraint__SWIG_0" new_btPoint2PointConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (pivotInA :pointer)
  (pivotInB :pointer))

(cffi:defcfun ("_wrap_new_btPoint2PointConstraint__SWIG_1" new_btPoint2PointConstraint) :pointer
  (rbA :pointer)
  (pivotInA :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_buildJacobian" btPoint2PointConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getInfo1" btPoint2PointConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getInfo1NonVirtual" btPoint2PointConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getInfo2" btPoint2PointConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getInfo2NonVirtual" btPoint2PointConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (body0_trans :pointer)
  (body1_trans :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_updateRHS" btPoint2PointConstraint_updateRHS) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_setPivotA" btPoint2PointConstraint_setPivotA) :void
  (self :pointer)
  (pivotA :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_setPivotB" btPoint2PointConstraint_setPivotB) :void
  (self :pointer)
  (pivotB :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getPivotInA" btPoint2PointConstraint_getPivotInA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getPivotInB" btPoint2PointConstraint_getPivotInB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_setParam__SWIG_0" btPoint2PointConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_setParam__SWIG_1" btPoint2PointConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getParam__SWIG_0" btPoint2PointConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getParam__SWIG_1" btPoint2PointConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_calculateSerializeBufferSize" btPoint2PointConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_serialize" btPoint2PointConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btPoint2PointConstraint" delete_btPoint2PointConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btPoint2PointConstraintFloatData" new_btPoint2PointConstraintFloatData) :pointer)

(cffi:defcfun ("_wrap_delete_btPoint2PointConstraintFloatData" delete_btPoint2PointConstraintFloatData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btPoint2PointConstraintDoubleData" new_btPoint2PointConstraintDoubleData) :pointer)

(cffi:defcfun ("_wrap_delete_btPoint2PointConstraintDoubleData" delete_btPoint2PointConstraintDoubleData) :void
  (self :pointer))

(cl:defconstant _BT_USE_CENTER_LIMIT_ 1)

(cl:defconstant btHingeConstraintDataName "btHingeConstraintFloatData")

(cffi:defcenum btHingeFlags
	(:BT_HINGE_FLAGS_CFM_STOP #.1)
	(:BT_HINGE_FLAGS_ERP_STOP #.2)
	(:BT_HINGE_FLAGS_CFM_NORM #.4))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_0" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (pivotInA :pointer)
  (pivotInB :pointer)
  (axisInA :pointer)
  (axisInB :pointer)
  (useReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_1" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (pivotInA :pointer)
  (pivotInB :pointer)
  (axisInA :pointer)
  (axisInB :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_2" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (pivotInA :pointer)
  (axisInA :pointer)
  (useReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_3" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (pivotInA :pointer)
  (axisInA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_4" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (rbAFrame :pointer)
  (rbBFrame :pointer)
  (useReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_5" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (rbAFrame :pointer)
  (rbBFrame :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_6" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbAFrame :pointer)
  (useReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_7" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbAFrame :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_buildJacobian" btHingeConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo1" btHingeConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo1NonVirtual" btHingeConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo2" btHingeConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo2NonVirtual" btHingeConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (angVelA :pointer)
  (angVelB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo2Internal" btHingeConstraint_getInfo2Internal) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (angVelA :pointer)
  (angVelB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo2InternalUsingFrameOffset" btHingeConstraint_getInfo2InternalUsingFrameOffset) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (angVelA :pointer)
  (angVelB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_updateRHS" btHingeConstraint_updateRHS) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btHingeConstraint_getRigidBodyA__SWIG_0" btHingeConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getRigidBodyB__SWIG_0" btHingeConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getRigidBodyA__SWIG_1" btHingeConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getRigidBodyB__SWIG_1" btHingeConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getFrameOffsetA" btHingeConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getFrameOffsetB" btHingeConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setFrames" btHingeConstraint_setFrames) :void
  (self :pointer)
  (frameA :pointer)
  (frameB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setAngularOnly" btHingeConstraint_setAngularOnly) :void
  (self :pointer)
  (angularOnly :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_enableAngularMotor" btHingeConstraint_enableAngularMotor) :void
  (self :pointer)
  (enableMotor :pointer)
  (targetVelocity :float)
  (maxMotorImpulse :float))

(cffi:defcfun ("_wrap_btHingeConstraint_enableMotor" btHingeConstraint_enableMotor) :void
  (self :pointer)
  (enableMotor :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setMaxMotorImpulse" btHingeConstraint_setMaxMotorImpulse) :void
  (self :pointer)
  (maxMotorImpulse :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setMotorTarget__SWIG_0" btHingeConstraint_setMotorTarget) :void
  (self :pointer)
  (qAinB :pointer)
  (dt :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setMotorTarget__SWIG_1" btHingeConstraint_setMotorTarget) :void
  (self :pointer)
  (targetAngle :float)
  (dt :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setLimit__SWIG_0" btHingeConstraint_setLimit) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float)
  (_biasFactor :float)
  (_relaxationFactor :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setLimit__SWIG_1" btHingeConstraint_setLimit) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float)
  (_biasFactor :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setLimit__SWIG_2" btHingeConstraint_setLimit) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setLimit__SWIG_3" btHingeConstraint_setLimit) :void
  (self :pointer)
  (low :float)
  (high :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setAxis" btHingeConstraint_setAxis) :void
  (self :pointer)
  (axisInA :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getLowerLimit" btHingeConstraint_getLowerLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getUpperLimit" btHingeConstraint_getUpperLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getHingeAngle__SWIG_0" btHingeConstraint_getHingeAngle) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getHingeAngle__SWIG_1" btHingeConstraint_getHingeAngle) :float
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_testLimit" btHingeConstraint_testLimit) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getAFrame__SWIG_0" btHingeConstraint_getAFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getBFrame__SWIG_0" btHingeConstraint_getBFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getAFrame__SWIG_1" btHingeConstraint_getAFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getBFrame__SWIG_1" btHingeConstraint_getBFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getSolveLimit" btHingeConstraint_getSolveLimit) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getLimitSign" btHingeConstraint_getLimitSign) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getAngularOnly" btHingeConstraint_getAngularOnly) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getEnableAngularMotor" btHingeConstraint_getEnableAngularMotor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getMotorTargetVelosity" btHingeConstraint_getMotorTargetVelosity) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getMaxMotorImpulse" btHingeConstraint_getMaxMotorImpulse) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getUseFrameOffset" btHingeConstraint_getUseFrameOffset) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setUseFrameOffset" btHingeConstraint_setUseFrameOffset) :void
  (self :pointer)
  (frameOffsetOnOff :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setParam__SWIG_0" btHingeConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btHingeConstraint_setParam__SWIG_1" btHingeConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btHingeConstraint_getParam__SWIG_0" btHingeConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btHingeConstraint_getParam__SWIG_1" btHingeConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btHingeConstraint_calculateSerializeBufferSize" btHingeConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_serialize" btHingeConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btHingeConstraint" delete_btHingeConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraintDoubleData" new_btHingeConstraintDoubleData) :pointer)

(cffi:defcfun ("_wrap_delete_btHingeConstraintDoubleData" delete_btHingeConstraintDoubleData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraintFloatData" new_btHingeConstraintFloatData) :pointer)

(cffi:defcfun ("_wrap_delete_btHingeConstraintFloatData" delete_btHingeConstraintFloatData) :void
  (self :pointer))

(cffi:defcenum btConeTwistFlags
	(:BT_CONETWIST_FLAGS_LIN_CFM #.1)
	(:BT_CONETWIST_FLAGS_LIN_ERP #.2)
	(:BT_CONETWIST_FLAGS_ANG_CFM #.4))

(cffi:defcfun ("_wrap_new_btConeTwistConstraint__SWIG_0" new_btConeTwistConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (rbAFrame :pointer)
  (rbBFrame :pointer))

(cffi:defcfun ("_wrap_new_btConeTwistConstraint__SWIG_1" new_btConeTwistConstraint) :pointer
  (rbA :pointer)
  (rbAFrame :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_buildJacobian" btConeTwistConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getInfo1" btConeTwistConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getInfo1NonVirtual" btConeTwistConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getInfo2" btConeTwistConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getInfo2NonVirtual" btConeTwistConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (invInertiaWorldA :pointer)
  (invInertiaWorldB :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_solveConstraintObsolete" btConeTwistConstraint_solveConstraintObsolete) :void
  (self :pointer)
  (bodyA :pointer)
  (bodyB :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_updateRHS" btConeTwistConstraint_updateRHS) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getRigidBodyA" btConeTwistConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getRigidBodyB" btConeTwistConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setAngularOnly" btConeTwistConstraint_setAngularOnly) :void
  (self :pointer)
  (angularOnly :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_0" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (limitIndex :int)
  (limitValue :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_1" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (_swingSpan1 :float)
  (_swingSpan2 :float)
  (_twistSpan :float)
  (_softness :float)
  (_biasFactor :float)
  (_relaxationFactor :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_2" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (_swingSpan1 :float)
  (_swingSpan2 :float)
  (_twistSpan :float)
  (_softness :float)
  (_biasFactor :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_3" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (_swingSpan1 :float)
  (_swingSpan2 :float)
  (_twistSpan :float)
  (_softness :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_4" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (_swingSpan1 :float)
  (_swingSpan2 :float)
  (_twistSpan :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getAFrame" btConeTwistConstraint_getAFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getBFrame" btConeTwistConstraint_getBFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getSolveTwistLimit" btConeTwistConstraint_getSolveTwistLimit) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getSolveSwingLimit" btConeTwistConstraint_getSolveSwingLimit) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getTwistLimitSign" btConeTwistConstraint_getTwistLimitSign) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_calcAngleInfo" btConeTwistConstraint_calcAngleInfo) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_calcAngleInfo2" btConeTwistConstraint_calcAngleInfo2) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer)
  (invInertiaWorldA :pointer)
  (invInertiaWorldB :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getSwingSpan1" btConeTwistConstraint_getSwingSpan1) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getSwingSpan2" btConeTwistConstraint_getSwingSpan2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getTwistSpan" btConeTwistConstraint_getTwistSpan) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getTwistAngle" btConeTwistConstraint_getTwistAngle) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_isPastSwingLimit" btConeTwistConstraint_isPastSwingLimit) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setDamping" btConeTwistConstraint_setDamping) :void
  (self :pointer)
  (damping :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_enableMotor" btConeTwistConstraint_enableMotor) :void
  (self :pointer)
  (b :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setMaxMotorImpulse" btConeTwistConstraint_setMaxMotorImpulse) :void
  (self :pointer)
  (maxMotorImpulse :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setMaxMotorImpulseNormalized" btConeTwistConstraint_setMaxMotorImpulseNormalized) :void
  (self :pointer)
  (maxMotorImpulse :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getFixThresh" btConeTwistConstraint_getFixThresh) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setFixThresh" btConeTwistConstraint_setFixThresh) :void
  (self :pointer)
  (fixThresh :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setMotorTarget" btConeTwistConstraint_setMotorTarget) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setMotorTargetInConstraintSpace" btConeTwistConstraint_setMotorTargetInConstraintSpace) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_GetPointForAngle" btConeTwistConstraint_GetPointForAngle) :pointer
  (self :pointer)
  (fAngleInRadians :float)
  (fLength :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setParam__SWIG_0" btConeTwistConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setParam__SWIG_1" btConeTwistConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setFrames" btConeTwistConstraint_setFrames) :void
  (self :pointer)
  (frameA :pointer)
  (frameB :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getFrameOffsetA" btConeTwistConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getFrameOffsetB" btConeTwistConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getParam__SWIG_0" btConeTwistConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getParam__SWIG_1" btConeTwistConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btConeTwistConstraint_calculateSerializeBufferSize" btConeTwistConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_serialize" btConeTwistConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btConeTwistConstraint" delete_btConeTwistConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConeTwistConstraintData" new_btConeTwistConstraintData) :pointer)

(cffi:defcfun ("_wrap_delete_btConeTwistConstraintData" delete_btConeTwistConstraintData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_loLimit_set" btRotationalLimitMotor_m_loLimit_set) :void
  (self :pointer)
  (m_loLimit :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_loLimit_get" btRotationalLimitMotor_m_loLimit_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_hiLimit_set" btRotationalLimitMotor_m_hiLimit_set) :void
  (self :pointer)
  (m_hiLimit :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_hiLimit_get" btRotationalLimitMotor_m_hiLimit_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_targetVelocity_set" btRotationalLimitMotor_m_targetVelocity_set) :void
  (self :pointer)
  (m_targetVelocity :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_targetVelocity_get" btRotationalLimitMotor_m_targetVelocity_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_maxMotorForce_set" btRotationalLimitMotor_m_maxMotorForce_set) :void
  (self :pointer)
  (m_maxMotorForce :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_maxMotorForce_get" btRotationalLimitMotor_m_maxMotorForce_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_maxLimitForce_set" btRotationalLimitMotor_m_maxLimitForce_set) :void
  (self :pointer)
  (m_maxLimitForce :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_maxLimitForce_get" btRotationalLimitMotor_m_maxLimitForce_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_damping_set" btRotationalLimitMotor_m_damping_set) :void
  (self :pointer)
  (m_damping :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_damping_get" btRotationalLimitMotor_m_damping_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_limitSoftness_set" btRotationalLimitMotor_m_limitSoftness_set) :void
  (self :pointer)
  (m_limitSoftness :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_limitSoftness_get" btRotationalLimitMotor_m_limitSoftness_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_normalCFM_set" btRotationalLimitMotor_m_normalCFM_set) :void
  (self :pointer)
  (m_normalCFM :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_normalCFM_get" btRotationalLimitMotor_m_normalCFM_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_stopERP_set" btRotationalLimitMotor_m_stopERP_set) :void
  (self :pointer)
  (m_stopERP :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_stopERP_get" btRotationalLimitMotor_m_stopERP_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_stopCFM_set" btRotationalLimitMotor_m_stopCFM_set) :void
  (self :pointer)
  (m_stopCFM :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_stopCFM_get" btRotationalLimitMotor_m_stopCFM_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_bounce_set" btRotationalLimitMotor_m_bounce_set) :void
  (self :pointer)
  (m_bounce :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_bounce_get" btRotationalLimitMotor_m_bounce_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_enableMotor_set" btRotationalLimitMotor_m_enableMotor_set) :void
  (self :pointer)
  (m_enableMotor :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_enableMotor_get" btRotationalLimitMotor_m_enableMotor_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentLimitError_set" btRotationalLimitMotor_m_currentLimitError_set) :void
  (self :pointer)
  (m_currentLimitError :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentLimitError_get" btRotationalLimitMotor_m_currentLimitError_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentPosition_set" btRotationalLimitMotor_m_currentPosition_set) :void
  (self :pointer)
  (m_currentPosition :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentPosition_get" btRotationalLimitMotor_m_currentPosition_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentLimit_set" btRotationalLimitMotor_m_currentLimit_set) :void
  (self :pointer)
  (m_currentLimit :int))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentLimit_get" btRotationalLimitMotor_m_currentLimit_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_accumulatedImpulse_set" btRotationalLimitMotor_m_accumulatedImpulse_set) :void
  (self :pointer)
  (m_accumulatedImpulse :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_accumulatedImpulse_get" btRotationalLimitMotor_m_accumulatedImpulse_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_new_btRotationalLimitMotor__SWIG_0" new_btRotationalLimitMotor) :pointer)

(cffi:defcfun ("_wrap_new_btRotationalLimitMotor__SWIG_1" new_btRotationalLimitMotor) :pointer
  (limot :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_isLimited" btRotationalLimitMotor_isLimited) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_needApplyTorques" btRotationalLimitMotor_needApplyTorques) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_testLimitValue" btRotationalLimitMotor_testLimitValue) :int
  (self :pointer)
  (test_value :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_solveAngularLimits" btRotationalLimitMotor_solveAngularLimits) :float
  (self :pointer)
  (timeStep :float)
  (axis :pointer)
  (jacDiagABInv :float)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_delete_btRotationalLimitMotor" delete_btRotationalLimitMotor) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_lowerLimit_set" btTranslationalLimitMotor_m_lowerLimit_set) :void
  (self :pointer)
  (m_lowerLimit :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_lowerLimit_get" btTranslationalLimitMotor_m_lowerLimit_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_upperLimit_set" btTranslationalLimitMotor_m_upperLimit_set) :void
  (self :pointer)
  (m_upperLimit :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_upperLimit_get" btTranslationalLimitMotor_m_upperLimit_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_accumulatedImpulse_set" btTranslationalLimitMotor_m_accumulatedImpulse_set) :void
  (self :pointer)
  (m_accumulatedImpulse :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_accumulatedImpulse_get" btTranslationalLimitMotor_m_accumulatedImpulse_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_limitSoftness_set" btTranslationalLimitMotor_m_limitSoftness_set) :void
  (self :pointer)
  (m_limitSoftness :float))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_limitSoftness_get" btTranslationalLimitMotor_m_limitSoftness_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_damping_set" btTranslationalLimitMotor_m_damping_set) :void
  (self :pointer)
  (m_damping :float))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_damping_get" btTranslationalLimitMotor_m_damping_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_restitution_set" btTranslationalLimitMotor_m_restitution_set) :void
  (self :pointer)
  (m_restitution :float))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_restitution_get" btTranslationalLimitMotor_m_restitution_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_normalCFM_set" btTranslationalLimitMotor_m_normalCFM_set) :void
  (self :pointer)
  (m_normalCFM :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_normalCFM_get" btTranslationalLimitMotor_m_normalCFM_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_stopERP_set" btTranslationalLimitMotor_m_stopERP_set) :void
  (self :pointer)
  (m_stopERP :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_stopERP_get" btTranslationalLimitMotor_m_stopERP_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_stopCFM_set" btTranslationalLimitMotor_m_stopCFM_set) :void
  (self :pointer)
  (m_stopCFM :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_stopCFM_get" btTranslationalLimitMotor_m_stopCFM_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_enableMotor_set" btTranslationalLimitMotor_m_enableMotor_set) :void
  (self :pointer)
  (m_enableMotor :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_enableMotor_get" btTranslationalLimitMotor_m_enableMotor_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_targetVelocity_set" btTranslationalLimitMotor_m_targetVelocity_set) :void
  (self :pointer)
  (m_targetVelocity :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_targetVelocity_get" btTranslationalLimitMotor_m_targetVelocity_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_maxMotorForce_set" btTranslationalLimitMotor_m_maxMotorForce_set) :void
  (self :pointer)
  (m_maxMotorForce :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_maxMotorForce_get" btTranslationalLimitMotor_m_maxMotorForce_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLimitError_set" btTranslationalLimitMotor_m_currentLimitError_set) :void
  (self :pointer)
  (m_currentLimitError :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLimitError_get" btTranslationalLimitMotor_m_currentLimitError_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLinearDiff_set" btTranslationalLimitMotor_m_currentLinearDiff_set) :void
  (self :pointer)
  (m_currentLinearDiff :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLinearDiff_get" btTranslationalLimitMotor_m_currentLinearDiff_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLimit_set" btTranslationalLimitMotor_m_currentLimit_set) :void
  (self :pointer)
  (m_currentLimit :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLimit_get" btTranslationalLimitMotor_m_currentLimit_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btTranslationalLimitMotor__SWIG_0" new_btTranslationalLimitMotor) :pointer)

(cffi:defcfun ("_wrap_new_btTranslationalLimitMotor__SWIG_1" new_btTranslationalLimitMotor) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_isLimited" btTranslationalLimitMotor_isLimited) :pointer
  (self :pointer)
  (limitIndex :int))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_needApplyForce" btTranslationalLimitMotor_needApplyForce) :pointer
  (self :pointer)
  (limitIndex :int))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_testLimitValue" btTranslationalLimitMotor_testLimitValue) :int
  (self :pointer)
  (limitIndex :int)
  (test_value :float))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_solveLinearAxis" btTranslationalLimitMotor_solveLinearAxis) :float
  (self :pointer)
  (timeStep :float)
  (jacDiagABInv :float)
  (body1 :pointer)
  (pointInA :pointer)
  (body2 :pointer)
  (pointInB :pointer)
  (limit_index :int)
  (axis_normal_on_a :pointer)
  (anchorPos :pointer))

(cffi:defcfun ("_wrap_delete_btTranslationalLimitMotor" delete_btTranslationalLimitMotor) :void
  (self :pointer))

(cffi:defcenum bt6DofFlags
	(:BT_6DOF_FLAGS_CFM_NORM #.1)
	(:BT_6DOF_FLAGS_CFM_STOP #.2)
	(:BT_6DOF_FLAGS_ERP_STOP #.4))

(cl:defconstant BT_6DOF_FLAGS_AXIS_SHIFT 3)

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_set" btGeneric6DofConstraint_m_useSolveConstraintObsolete_set) :void
  (self :pointer)
  (m_useSolveConstraintObsolete :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_get" btGeneric6DofConstraint_m_useSolveConstraintObsolete_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btGeneric6DofConstraint__SWIG_0" new_btGeneric6DofConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (frameInA :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btGeneric6DofConstraint__SWIG_1" new_btGeneric6DofConstraint) :pointer
  (rbB :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_0" btGeneric6DofConstraint_calculateTransforms) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_1" btGeneric6DofConstraint_calculateTransforms) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getCalculatedTransformA" btGeneric6DofConstraint_getCalculatedTransformA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getCalculatedTransformB" btGeneric6DofConstraint_getCalculatedTransformB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_0" btGeneric6DofConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_0" btGeneric6DofConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_1" btGeneric6DofConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_1" btGeneric6DofConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_buildJacobian" btGeneric6DofConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getInfo1" btGeneric6DofConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getInfo1NonVirtual" btGeneric6DofConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getInfo2" btGeneric6DofConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getInfo2NonVirtual" btGeneric6DofConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (linVelA :pointer)
  (linVelB :pointer)
  (angVelA :pointer)
  (angVelB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_updateRHS" btGeneric6DofConstraint_updateRHS) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getAxis" btGeneric6DofConstraint_getAxis) :pointer
  (self :pointer)
  (axis_index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getAngle" btGeneric6DofConstraint_getAngle) :float
  (self :pointer)
  (axis_index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getRelativePivotPosition" btGeneric6DofConstraint_getRelativePivotPosition) :float
  (self :pointer)
  (axis_index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setFrames" btGeneric6DofConstraint_setFrames) :void
  (self :pointer)
  (frameA :pointer)
  (frameB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_testAngularLimitMotor" btGeneric6DofConstraint_testAngularLimitMotor) :pointer
  (self :pointer)
  (axis_index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setLinearLowerLimit" btGeneric6DofConstraint_setLinearLowerLimit) :void
  (self :pointer)
  (linearLower :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getLinearLowerLimit" btGeneric6DofConstraint_getLinearLowerLimit) :void
  (self :pointer)
  (linearLower :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setLinearUpperLimit" btGeneric6DofConstraint_setLinearUpperLimit) :void
  (self :pointer)
  (linearUpper :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getLinearUpperLimit" btGeneric6DofConstraint_getLinearUpperLimit) :void
  (self :pointer)
  (linearUpper :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setAngularLowerLimit" btGeneric6DofConstraint_setAngularLowerLimit) :void
  (self :pointer)
  (angularLower :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getAngularLowerLimit" btGeneric6DofConstraint_getAngularLowerLimit) :void
  (self :pointer)
  (angularLower :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setAngularUpperLimit" btGeneric6DofConstraint_setAngularUpperLimit) :void
  (self :pointer)
  (angularUpper :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getAngularUpperLimit" btGeneric6DofConstraint_getAngularUpperLimit) :void
  (self :pointer)
  (angularUpper :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getRotationalLimitMotor" btGeneric6DofConstraint_getRotationalLimitMotor) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getTranslationalLimitMotor" btGeneric6DofConstraint_getTranslationalLimitMotor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setLimit" btGeneric6DofConstraint_setLimit) :void
  (self :pointer)
  (axis :int)
  (lo :float)
  (hi :float))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_isLimited" btGeneric6DofConstraint_isLimited) :pointer
  (self :pointer)
  (limitIndex :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_calcAnchorPos" btGeneric6DofConstraint_calcAnchorPos) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0" btGeneric6DofConstraint_get_limit_motor_info2) :int
  (self :pointer)
  (limot :pointer)
  (transA :pointer)
  (transB :pointer)
  (linVelA :pointer)
  (linVelB :pointer)
  (angVelA :pointer)
  (angVelB :pointer)
  (info :pointer)
  (row :int)
  (ax1 :pointer)
  (rotational :int)
  (rotAllowed :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1" btGeneric6DofConstraint_get_limit_motor_info2) :int
  (self :pointer)
  (limot :pointer)
  (transA :pointer)
  (transB :pointer)
  (linVelA :pointer)
  (linVelB :pointer)
  (angVelA :pointer)
  (angVelB :pointer)
  (info :pointer)
  (row :int)
  (ax1 :pointer)
  (rotational :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getUseFrameOffset" btGeneric6DofConstraint_getUseFrameOffset) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setUseFrameOffset" btGeneric6DofConstraint_setUseFrameOffset) :void
  (self :pointer)
  (frameOffsetOnOff :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setParam__SWIG_0" btGeneric6DofConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setParam__SWIG_1" btGeneric6DofConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getParam__SWIG_0" btGeneric6DofConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getParam__SWIG_1" btGeneric6DofConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setAxis" btGeneric6DofConstraint_setAxis) :void
  (self :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_calculateSerializeBufferSize" btGeneric6DofConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_serialize" btGeneric6DofConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btGeneric6DofConstraint" delete_btGeneric6DofConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btGeneric6DofConstraintData" new_btGeneric6DofConstraintData) :pointer)

(cffi:defcfun ("_wrap_delete_btGeneric6DofConstraintData" delete_btGeneric6DofConstraintData) :void
  (self :pointer))

(cffi:defcenum btSliderFlags
	(:BT_SLIDER_FLAGS_CFM_DIRLIN #.(cl:ash 1 0))
	(:BT_SLIDER_FLAGS_ERP_DIRLIN #.(cl:ash 1 1))
	(:BT_SLIDER_FLAGS_CFM_DIRANG #.(cl:ash 1 2))
	(:BT_SLIDER_FLAGS_ERP_DIRANG #.(cl:ash 1 3))
	(:BT_SLIDER_FLAGS_CFM_ORTLIN #.(cl:ash 1 4))
	(:BT_SLIDER_FLAGS_ERP_ORTLIN #.(cl:ash 1 5))
	(:BT_SLIDER_FLAGS_CFM_ORTANG #.(cl:ash 1 6))
	(:BT_SLIDER_FLAGS_ERP_ORTANG #.(cl:ash 1 7))
	(:BT_SLIDER_FLAGS_CFM_LIMLIN #.(cl:ash 1 8))
	(:BT_SLIDER_FLAGS_ERP_LIMLIN #.(cl:ash 1 9))
	(:BT_SLIDER_FLAGS_CFM_LIMANG #.(cl:ash 1 10))
	(:BT_SLIDER_FLAGS_ERP_LIMANG #.(cl:ash 1 11)))

(cffi:defcfun ("_wrap_new_btSliderConstraint__SWIG_0" new_btSliderConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (frameInA :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btSliderConstraint__SWIG_1" new_btSliderConstraint) :pointer
  (rbB :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getInfo1" btSliderConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getInfo1NonVirtual" btSliderConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getInfo2" btSliderConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getInfo2NonVirtual" btSliderConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (linVelA :pointer)
  (linVelB :pointer)
  (rbAinvMass :float)
  (rbBinvMass :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getRigidBodyA" btSliderConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRigidBodyB" btSliderConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getCalculatedTransformA" btSliderConstraint_getCalculatedTransformA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getCalculatedTransformB" btSliderConstraint_getCalculatedTransformB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getFrameOffsetA__SWIG_0" btSliderConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getFrameOffsetB__SWIG_0" btSliderConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getFrameOffsetA__SWIG_1" btSliderConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getFrameOffsetB__SWIG_1" btSliderConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getLowerLinLimit" btSliderConstraint_getLowerLinLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setLowerLinLimit" btSliderConstraint_setLowerLinLimit) :void
  (self :pointer)
  (lowerLimit :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getUpperLinLimit" btSliderConstraint_getUpperLinLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setUpperLinLimit" btSliderConstraint_setUpperLinLimit) :void
  (self :pointer)
  (upperLimit :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getLowerAngLimit" btSliderConstraint_getLowerAngLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setLowerAngLimit" btSliderConstraint_setLowerAngLimit) :void
  (self :pointer)
  (lowerLimit :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getUpperAngLimit" btSliderConstraint_getUpperAngLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setUpperAngLimit" btSliderConstraint_setUpperAngLimit) :void
  (self :pointer)
  (upperLimit :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getUseLinearReferenceFrameA" btSliderConstraint_getUseLinearReferenceFrameA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessDirLin" btSliderConstraint_getSoftnessDirLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionDirLin" btSliderConstraint_getRestitutionDirLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingDirLin" btSliderConstraint_getDampingDirLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessDirAng" btSliderConstraint_getSoftnessDirAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionDirAng" btSliderConstraint_getRestitutionDirAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingDirAng" btSliderConstraint_getDampingDirAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessLimLin" btSliderConstraint_getSoftnessLimLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionLimLin" btSliderConstraint_getRestitutionLimLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingLimLin" btSliderConstraint_getDampingLimLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessLimAng" btSliderConstraint_getSoftnessLimAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionLimAng" btSliderConstraint_getRestitutionLimAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingLimAng" btSliderConstraint_getDampingLimAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessOrthoLin" btSliderConstraint_getSoftnessOrthoLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionOrthoLin" btSliderConstraint_getRestitutionOrthoLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingOrthoLin" btSliderConstraint_getDampingOrthoLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessOrthoAng" btSliderConstraint_getSoftnessOrthoAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionOrthoAng" btSliderConstraint_getRestitutionOrthoAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingOrthoAng" btSliderConstraint_getDampingOrthoAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessDirLin" btSliderConstraint_setSoftnessDirLin) :void
  (self :pointer)
  (softnessDirLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionDirLin" btSliderConstraint_setRestitutionDirLin) :void
  (self :pointer)
  (restitutionDirLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingDirLin" btSliderConstraint_setDampingDirLin) :void
  (self :pointer)
  (dampingDirLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessDirAng" btSliderConstraint_setSoftnessDirAng) :void
  (self :pointer)
  (softnessDirAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionDirAng" btSliderConstraint_setRestitutionDirAng) :void
  (self :pointer)
  (restitutionDirAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingDirAng" btSliderConstraint_setDampingDirAng) :void
  (self :pointer)
  (dampingDirAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessLimLin" btSliderConstraint_setSoftnessLimLin) :void
  (self :pointer)
  (softnessLimLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionLimLin" btSliderConstraint_setRestitutionLimLin) :void
  (self :pointer)
  (restitutionLimLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingLimLin" btSliderConstraint_setDampingLimLin) :void
  (self :pointer)
  (dampingLimLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessLimAng" btSliderConstraint_setSoftnessLimAng) :void
  (self :pointer)
  (softnessLimAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionLimAng" btSliderConstraint_setRestitutionLimAng) :void
  (self :pointer)
  (restitutionLimAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingLimAng" btSliderConstraint_setDampingLimAng) :void
  (self :pointer)
  (dampingLimAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessOrthoLin" btSliderConstraint_setSoftnessOrthoLin) :void
  (self :pointer)
  (softnessOrthoLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionOrthoLin" btSliderConstraint_setRestitutionOrthoLin) :void
  (self :pointer)
  (restitutionOrthoLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingOrthoLin" btSliderConstraint_setDampingOrthoLin) :void
  (self :pointer)
  (dampingOrthoLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessOrthoAng" btSliderConstraint_setSoftnessOrthoAng) :void
  (self :pointer)
  (softnessOrthoAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionOrthoAng" btSliderConstraint_setRestitutionOrthoAng) :void
  (self :pointer)
  (restitutionOrthoAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingOrthoAng" btSliderConstraint_setDampingOrthoAng) :void
  (self :pointer)
  (dampingOrthoAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setPoweredLinMotor" btSliderConstraint_setPoweredLinMotor) :void
  (self :pointer)
  (onOff :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getPoweredLinMotor" btSliderConstraint_getPoweredLinMotor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setTargetLinMotorVelocity" btSliderConstraint_setTargetLinMotorVelocity) :void
  (self :pointer)
  (targetLinMotorVelocity :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getTargetLinMotorVelocity" btSliderConstraint_getTargetLinMotorVelocity) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setMaxLinMotorForce" btSliderConstraint_setMaxLinMotorForce) :void
  (self :pointer)
  (maxLinMotorForce :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getMaxLinMotorForce" btSliderConstraint_getMaxLinMotorForce) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setPoweredAngMotor" btSliderConstraint_setPoweredAngMotor) :void
  (self :pointer)
  (onOff :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getPoweredAngMotor" btSliderConstraint_getPoweredAngMotor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setTargetAngMotorVelocity" btSliderConstraint_setTargetAngMotorVelocity) :void
  (self :pointer)
  (targetAngMotorVelocity :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getTargetAngMotorVelocity" btSliderConstraint_getTargetAngMotorVelocity) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setMaxAngMotorForce" btSliderConstraint_setMaxAngMotorForce) :void
  (self :pointer)
  (maxAngMotorForce :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getMaxAngMotorForce" btSliderConstraint_getMaxAngMotorForce) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getLinearPos" btSliderConstraint_getLinearPos) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getAngularPos" btSliderConstraint_getAngularPos) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSolveLinLimit" btSliderConstraint_getSolveLinLimit) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getLinDepth" btSliderConstraint_getLinDepth) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSolveAngLimit" btSliderConstraint_getSolveAngLimit) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getAngDepth" btSliderConstraint_getAngDepth) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_calculateTransforms" btSliderConstraint_calculateTransforms) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_testLinLimits" btSliderConstraint_testLinLimits) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_testAngLimits" btSliderConstraint_testAngLimits) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getAncorInA" btSliderConstraint_getAncorInA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getAncorInB" btSliderConstraint_getAncorInB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getUseFrameOffset" btSliderConstraint_getUseFrameOffset) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setUseFrameOffset" btSliderConstraint_setUseFrameOffset) :void
  (self :pointer)
  (frameOffsetOnOff :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setFrames" btSliderConstraint_setFrames) :void
  (self :pointer)
  (frameA :pointer)
  (frameB :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setParam__SWIG_0" btSliderConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btSliderConstraint_setParam__SWIG_1" btSliderConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getParam__SWIG_0" btSliderConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btSliderConstraint_getParam__SWIG_1" btSliderConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btSliderConstraint_calculateSerializeBufferSize" btSliderConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_serialize" btSliderConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btSliderConstraint" delete_btSliderConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btSliderConstraintData" new_btSliderConstraintData) :pointer)

(cffi:defcfun ("_wrap_delete_btSliderConstraintData" delete_btSliderConstraintData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btGeneric6DofSpringConstraint" new_btGeneric6DofSpringConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (frameInA :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_enableSpring" btGeneric6DofSpringConstraint_enableSpring) :void
  (self :pointer)
  (index :int)
  (onOff :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setStiffness" btGeneric6DofSpringConstraint_setStiffness) :void
  (self :pointer)
  (index :int)
  (stiffness :float))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setDamping" btGeneric6DofSpringConstraint_setDamping) :void
  (self :pointer)
  (index :int)
  (damping :float))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0" btGeneric6DofSpringConstraint_setEquilibriumPoint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1" btGeneric6DofSpringConstraint_setEquilibriumPoint) :void
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2" btGeneric6DofSpringConstraint_setEquilibriumPoint) :void
  (self :pointer)
  (index :int)
  (val :float))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setAxis" btGeneric6DofSpringConstraint_setAxis) :void
  (self :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_getInfo2" btGeneric6DofSpringConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_calculateSerializeBufferSize" btGeneric6DofSpringConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_serialize" btGeneric6DofSpringConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btGeneric6DofSpringConstraint" delete_btGeneric6DofSpringConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btGeneric6DofSpringConstraintData" new_btGeneric6DofSpringConstraintData) :pointer)

(cffi:defcfun ("_wrap_delete_btGeneric6DofSpringConstraintData" delete_btGeneric6DofSpringConstraintData) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btUniversalConstraint" new_btUniversalConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (anchor :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAnchor" btUniversalConstraint_getAnchor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAnchor2" btUniversalConstraint_getAnchor2) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAxis1" btUniversalConstraint_getAxis1) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAxis2" btUniversalConstraint_getAxis2) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAngle1" btUniversalConstraint_getAngle1) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAngle2" btUniversalConstraint_getAngle2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_setUpperLimit" btUniversalConstraint_setUpperLimit) :void
  (self :pointer)
  (ang1max :float)
  (ang2max :float))

(cffi:defcfun ("_wrap_btUniversalConstraint_setLowerLimit" btUniversalConstraint_setLowerLimit) :void
  (self :pointer)
  (ang1min :float)
  (ang2min :float))

(cffi:defcfun ("_wrap_btUniversalConstraint_setAxis" btUniversalConstraint_setAxis) :void
  (self :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_delete_btUniversalConstraint" delete_btUniversalConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btHinge2Constraint" new_btHinge2Constraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (anchor :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAnchor" btHinge2Constraint_getAnchor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAnchor2" btHinge2Constraint_getAnchor2) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAxis1" btHinge2Constraint_getAxis1) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAxis2" btHinge2Constraint_getAxis2) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAngle1" btHinge2Constraint_getAngle1) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAngle2" btHinge2Constraint_getAngle2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_setUpperLimit" btHinge2Constraint_setUpperLimit) :void
  (self :pointer)
  (ang1max :float))

(cffi:defcfun ("_wrap_btHinge2Constraint_setLowerLimit" btHinge2Constraint_setLowerLimit) :void
  (self :pointer)
  (ang1min :float))

(cffi:defcfun ("_wrap_delete_btHinge2Constraint" delete_btHinge2Constraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btConstraintSolver" delete_btConstraintSolver) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConstraintSolver_prepareSolve" btConstraintSolver_prepareSolve) :void
  (self :pointer)
  (arg1 :int)
  (arg2 :int))

(cffi:defcfun ("_wrap_btConstraintSolver_solveGroup" btConstraintSolver_solveGroup) :float
  (self :pointer)
  (bodies :pointer)
  (numBodies :int)
  (manifold :pointer)
  (numManifolds :int)
  (constraints :pointer)
  (numConstraints :int)
  (info :pointer)
  (debugDrawer :pointer)
  (stackAlloc :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btConstraintSolver_allSolved" btConstraintSolver_allSolved) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("_wrap_btConstraintSolver_reset" btConstraintSolver_reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btContactConstraint_setContactManifold" btContactConstraint_setContactManifold) :void
  (self :pointer)
  (contactManifold :pointer))

(cffi:defcfun ("_wrap_btContactConstraint_getContactManifold__SWIG_0" btContactConstraint_getContactManifold) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btContactConstraint_getContactManifold__SWIG_1" btContactConstraint_getContactManifold) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btContactConstraint" delete_btContactConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btContactConstraint_getInfo1" btContactConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btContactConstraint_getInfo2" btContactConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btContactConstraint_buildJacobian" btContactConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_resolveSingleCollision" resolveSingleCollision) :float
  (body1 :pointer)
  (colObj2 :pointer)
  (contactPositionWorld :pointer)
  (contactNormalOnB :pointer)
  (solverInfo :pointer)
  (distance :float))

(cffi:defcfun ("_wrap_resolveSingleBilateral" resolveSingleBilateral) :void
  (body1 :pointer)
  (pos1 :pointer)
  (body2 :pointer)
  (pos2 :pointer)
  (distance :float)
  (normal :pointer)
  (impulse :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_new_btSequentialImpulseConstraintSolver" new_btSequentialImpulseConstraintSolver) :pointer)

(cffi:defcfun ("_wrap_delete_btSequentialImpulseConstraintSolver" delete_btSequentialImpulseConstraintSolver) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_solveGroup" btSequentialImpulseConstraintSolver_solveGroup) :float
  (self :pointer)
  (bodies :pointer)
  (numBodies :int)
  (manifold :pointer)
  (numManifolds :int)
  (constraints :pointer)
  (numConstraints :int)
  (info :pointer)
  (debugDrawer :pointer)
  (stackAlloc :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_reset" btSequentialImpulseConstraintSolver_reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_btRand2" btSequentialImpulseConstraintSolver_btRand2) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_btRandInt2" btSequentialImpulseConstraintSolver_btRandInt2) :int
  (self :pointer)
  (n :int))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_setRandSeed" btSequentialImpulseConstraintSolver_setRandSeed) :void
  (self :pointer)
  (seed :unsigned-long))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_getRandSeed" btSequentialImpulseConstraintSolver_getRandSeed) :unsigned-long
  (self :pointer))

(cffi:defcstruct btVehicleRaycaster
	(castRay :pointer))

(cffi:defcstruct btWheelInfoConstructionInfo
	(m_chassisConnectionCS :pointer)
	(m_wheelDirectionCS :pointer)
	(m_wheelAxleCS :pointer)
	(m_suspensionRestLength :float)
	(m_maxSuspensionTravelCm :float)
	(m_wheelRadius :float)
	(m_suspensionStiffness :float)
	(m_wheelsDampingCompression :float)
	(m_wheelsDampingRelaxation :float)
	(m_frictionSlip :float)
	(m_maxSuspensionForce :float)
	(m_bIsFrontWheel :pointer))

(cffi:defcstruct btWheelInfo
	(m_raycastInfo :pointer)
	(m_worldTransform :pointer)
	(m_chassisConnectionPointCS :pointer)
	(m_wheelDirectionCS :pointer)
	(m_wheelAxleCS :pointer)
	(m_suspensionRestLength1 :float)
	(m_maxSuspensionTravelCm :float)
	(getSuspensionRestLength :pointer)
	(m_wheelsRadius :float)
	(m_suspensionStiffness :float)
	(m_wheelsDampingCompression :float)
	(m_wheelsDampingRelaxation :float)
	(m_frictionSlip :float)
	(m_steering :float)
	(m_rotation :float)
	(m_deltaRotation :float)
	(m_rollInfluence :float)
	(m_maxSuspensionForce :float)
	(m_engineForce :float)
	(m_brake :float)
	(m_bIsFrontWheel :pointer)
	(m_clientInfo :pointer)
	(updateWheel :pointer)
	(m_clippedInvContactDotSuspension :float)
	(m_suspensionRelativeVelocity :float)
	(m_wheelsSuspensionForce :float)
	(m_skidInfo :float))

(cffi:defcfun ("_wrap_delete_btActionInterface" delete_btActionInterface) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btActionInterface_updateAction" btActionInterface_updateAction) :void
  (self :pointer)
  (collisionWorld :pointer)
  (deltaTimeStep :float))

(cffi:defcfun ("_wrap_btActionInterface_debugDraw" btActionInterface_debugDraw) :void
  (self :pointer)
  (debugDrawer :pointer))

(cffi:defcfun ("_wrap_new_btRaycastVehicle" new_btRaycastVehicle) :pointer
  (tuning :pointer)
  (chassis :pointer)
  (raycaster :pointer))

(cffi:defcfun ("_wrap_delete_btRaycastVehicle" delete_btRaycastVehicle) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_updateAction" btRaycastVehicle_updateAction) :void
  (self :pointer)
  (collisionWorld :pointer)
  (step :float))

(cffi:defcfun ("_wrap_btRaycastVehicle_debugDraw" btRaycastVehicle_debugDraw) :void
  (self :pointer)
  (debugDrawer :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getChassisWorldTransform" btRaycastVehicle_getChassisWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_rayCast" btRaycastVehicle_rayCast) :float
  (self :pointer)
  (wheel :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_updateVehicle" btRaycastVehicle_updateVehicle) :void
  (self :pointer)
  (step :float))

(cffi:defcfun ("_wrap_btRaycastVehicle_resetSuspension" btRaycastVehicle_resetSuspension) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getSteeringValue" btRaycastVehicle_getSteeringValue) :float
  (self :pointer)
  (wheel :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_setSteeringValue" btRaycastVehicle_setSteeringValue) :void
  (self :pointer)
  (steering :float)
  (wheel :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_applyEngineForce" btRaycastVehicle_applyEngineForce) :void
  (self :pointer)
  (force :float)
  (wheel :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_getWheelTransformWS" btRaycastVehicle_getWheelTransformWS) :pointer
  (self :pointer)
  (wheelIndex :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_updateWheelTransform__SWIG_0" btRaycastVehicle_updateWheelTransform) :void
  (self :pointer)
  (wheelIndex :int)
  (interpolatedTransform :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_updateWheelTransform__SWIG_1" btRaycastVehicle_updateWheelTransform) :void
  (self :pointer)
  (wheelIndex :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_addWheel" btRaycastVehicle_addWheel) :pointer
  (self :pointer)
  (connectionPointCS0 :pointer)
  (wheelDirectionCS0 :pointer)
  (wheelAxleCS :pointer)
  (suspensionRestLength :float)
  (wheelRadius :float)
  (tuning :pointer)
  (isFrontWheel :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getNumWheels" btRaycastVehicle_getNumWheels) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_m_wheelInfo_set" btRaycastVehicle_m_wheelInfo_set) :void
  (self :pointer)
  (m_wheelInfo :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_m_wheelInfo_get" btRaycastVehicle_m_wheelInfo_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getWheelInfo__SWIG_0" btRaycastVehicle_getWheelInfo) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_getWheelInfo__SWIG_1" btRaycastVehicle_getWheelInfo) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_updateWheelTransformsWS__SWIG_0" btRaycastVehicle_updateWheelTransformsWS) :void
  (self :pointer)
  (wheel :pointer)
  (interpolatedTransform :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_updateWheelTransformsWS__SWIG_1" btRaycastVehicle_updateWheelTransformsWS) :void
  (self :pointer)
  (wheel :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_setBrake" btRaycastVehicle_setBrake) :void
  (self :pointer)
  (brake :float)
  (wheelIndex :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_setPitchControl" btRaycastVehicle_setPitchControl) :void
  (self :pointer)
  (pitch :float))

(cffi:defcfun ("_wrap_btRaycastVehicle_updateSuspension" btRaycastVehicle_updateSuspension) :void
  (self :pointer)
  (deltaTime :float))

(cffi:defcfun ("_wrap_btRaycastVehicle_updateFriction" btRaycastVehicle_updateFriction) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btRaycastVehicle_getRigidBody__SWIG_0" btRaycastVehicle_getRigidBody) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getRigidBody__SWIG_1" btRaycastVehicle_getRigidBody) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getRightAxis" btRaycastVehicle_getRightAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getUpAxis" btRaycastVehicle_getUpAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getForwardAxis" btRaycastVehicle_getForwardAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getForwardVector" btRaycastVehicle_getForwardVector) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_getCurrentSpeedKmHour" btRaycastVehicle_getCurrentSpeedKmHour) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_setCoordinateSystem" btRaycastVehicle_setCoordinateSystem) :void
  (self :pointer)
  (rightIndex :int)
  (upIndex :int)
  (forwardIndex :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_getUserConstraintType" btRaycastVehicle_getUserConstraintType) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRaycastVehicle_setUserConstraintType" btRaycastVehicle_setUserConstraintType) :void
  (self :pointer)
  (userConstraintType :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_setUserConstraintId" btRaycastVehicle_setUserConstraintId) :void
  (self :pointer)
  (uid :int))

(cffi:defcfun ("_wrap_btRaycastVehicle_getUserConstraintId" btRaycastVehicle_getUserConstraintId) :int
  (self :pointer))

(cffi:defcfun ("_wrap_new_btDefaultVehicleRaycaster" new_btDefaultVehicleRaycaster) :pointer
  (world :pointer))

(cffi:defcfun ("_wrap_btDefaultVehicleRaycaster_castRay" btDefaultVehicleRaycaster_castRay) :pointer
  (self :pointer)
  (from :pointer)
  (to :pointer)
  (result :pointer))

(cffi:defcfun ("_wrap_delete_btDefaultVehicleRaycaster" delete_btDefaultVehicleRaycaster) :void
  (self :pointer))


